
uart_shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003900  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca0  08003ca0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ca8  08003ca8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca8  08003ca8  00013ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003d20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003d20  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097ee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c56  00000000  00000000  0002988e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015743  00000000  00000000  0002c300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086a8  00000000  00000000  00041a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000860c7  00000000  00000000  0004a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d01b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a8  00000000  00000000  000d0208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a88 	.word	0x08003a88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003a88 	.word	0x08003a88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f000 faac 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f80c 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f8c6 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 f89a 	bl	80006d0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800059c:	f000 f86e 	bl	800067c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 80005a0:	f001 feaa 	bl	80022f8 <app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	app_loop();
 80005a4:	f001 feb4 	bl	8002310 <app_loop>
 80005a8:	e7fc      	b.n	80005a4 <main+0x1c>
	...

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f958 	bl	8002870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <SystemClock_Config+0xc8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <SystemClock_Config+0xc8>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SystemClock_Config+0xcc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a20      	ldr	r2, [pc, #128]	; (8000678 <SystemClock_Config+0xcc>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800061c:	230c      	movs	r3, #12
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000620:	2360      	movs	r3, #96	; 0x60
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fe0b 	bl	800124c <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 f8dc 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2103      	movs	r1, #3
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f865 	bl	800172c <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000668:	f000 f8c6 	bl	80007f8 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	; 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART1_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000688:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800068c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART1_UART_Init+0x4c>)
 80006b4:	f001 fa0a 	bl	8001acc <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f89b 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000f4 	.word	0x200000f4
 80006cc:	40011000 	.word	0x40011000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 f9e0 	bl	8001acc <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f871 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000134 	.word	0x20000134
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xc4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_GPIO_Init+0xc4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xc4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <MX_GPIO_Init+0xc4>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_GPIO_Init+0xc4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_GPIO_Init+0xc4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <MX_GPIO_Init+0xc4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_GPIO_Init+0xc4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000794:	4815      	ldr	r0, [pc, #84]	; (80007ec <MX_GPIO_Init+0xc8>)
 8000796:	f000 fd0d 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <MX_GPIO_Init+0xc8>)
 80007b4:	f000 fb7a 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_SW_Pin */
  GPIO_InitStruct.Pin = USER_SW_Pin;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_GPIO_Init+0xcc>)
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_SW_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <MX_GPIO_Init+0xd0>)
 80007cc:	f000 fb6e 	bl	8000eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2105      	movs	r1, #5
 80007d4:	2006      	movs	r0, #6
 80007d6:	f000 fb16 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007da:	2006      	movs	r0, #6
 80007dc:	f000 fb2f 	bl	8000e3e <HAL_NVIC_EnableIRQ>

}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020800 	.word	0x40020800
 80007f0:	10210000 	.word	0x10210000
 80007f4:	40020000 	.word	0x40020000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <HAL_MspInit+0x4c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a3a      	ldr	r2, [pc, #232]	; (8000960 <HAL_UART_MspInit+0x108>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d135      	bne.n	80008e6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <HAL_UART_MspInit+0x10c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a38      	ldr	r2, [pc, #224]	; (8000964 <HAL_UART_MspInit+0x10c>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <HAL_UART_MspInit+0x10c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <HAL_UART_MspInit+0x10c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a31      	ldr	r2, [pc, #196]	; (8000964 <HAL_UART_MspInit+0x10c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <HAL_UART_MspInit+0x10c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c4:	2307      	movs	r3, #7
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4826      	ldr	r0, [pc, #152]	; (8000968 <HAL_UART_MspInit+0x110>)
 80008d0:	f000 faec 	bl	8000eac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2103      	movs	r1, #3
 80008d8:	2025      	movs	r0, #37	; 0x25
 80008da:	f000 fa94 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008de:	2025      	movs	r0, #37	; 0x25
 80008e0:	f000 faad 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e4:	e038      	b.n	8000958 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a20      	ldr	r2, [pc, #128]	; (800096c <HAL_UART_MspInit+0x114>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d133      	bne.n	8000958 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <HAL_UART_MspInit+0x10c>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <HAL_UART_MspInit+0x10c>)
 80008fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_UART_MspInit+0x10c>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_UART_MspInit+0x10c>)
 8000912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000914:	4a13      	ldr	r2, [pc, #76]	; (8000964 <HAL_UART_MspInit+0x10c>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6313      	str	r3, [r2, #48]	; 0x30
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_UART_MspInit+0x10c>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000928:	230c      	movs	r3, #12
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000938:	2307      	movs	r3, #7
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_UART_MspInit+0x110>)
 8000944:	f000 fab2 	bl	8000eac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2102      	movs	r1, #2
 800094c:	2026      	movs	r0, #38	; 0x26
 800094e:	f000 fa5a 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000952:	2026      	movs	r0, #38	; 0x26
 8000954:	f000 fa73 	bl	8000e3e <HAL_NVIC_EnableIRQ>
}
 8000958:	bf00      	nop
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40011000 	.word	0x40011000
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	40004400 	.word	0x40004400

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f8e2 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  app_tick_1ms();
 80009c8:	f001 fc88 	bl	80022dc <app_tick_1ms>
  shell_tick_1ms();
 80009cc:	f001 fd2a 	bl	8002424 <shell_tick_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009d8:	2001      	movs	r0, #1
 80009da:	f000 fc1f 	bl	800121c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
#if 1
  extern void shell_uart_interrupt(void);
  shell_uart_interrupt();
 80009e6:	f001 fea5 	bl	8002734 <shell_uart_interrupt>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}

080009ee <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
#if 1
  extern void hw_uart2_interrupt(void);
  hw_uart2_interrupt();
 80009f2:	f001 fce7 	bl	80023c4 <hw_uart2_interrupt>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <_sbrk+0x5c>)
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <_sbrk+0x60>)
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d102      	bne.n	8000a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <_sbrk+0x64>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <_sbrk+0x68>)
 8000a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d207      	bcs.n	8000a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a2c:	f001 fef6 	bl	800281c <__errno>
 8000a30:	4603      	mov	r3, r0
 8000a32:	220c      	movs	r2, #12
 8000a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	e009      	b.n	8000a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <_sbrk+0x64>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <_sbrk+0x64>)
 8000a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20020000 	.word	0x20020000
 8000a5c:	00000400 	.word	0x00000400
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	20000188 	.word	0x20000188

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SystemInit+0x28>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <SystemInit+0x28>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SystemInit+0x28>)
 8000a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a82:	609a      	str	r2, [r3, #8]
#endif
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
  ldr  r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ab2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab4:	f842 3b04 	str.w	r3, [r2], #4

08000ab8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd3 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f001 feb1 	bl	8002828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd5f 	bl	8000588 <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad0:	08003cb0 	.word	0x08003cb0
  ldr  r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ad8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000adc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ae0:	20000188 	.word	0x20000188

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f96d 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe74 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f993 	bl	8000e76 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f94d 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000174 	.word	0x20000174

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000174 	.word	0x20000174

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db12      	blt.n	8000ca4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	490a      	ldr	r1, [pc, #40]	; (8000cb0 <__NVIC_DisableIRQ+0x44>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	3320      	adds	r3, #32
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
}
 8000ca2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0c      	blt.n	8000ce0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_ClearPendingIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	3360      	adds	r3, #96	; 0x60
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fee7 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff fefc 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff feef 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff feff 	bl	8000c6c <__NVIC_DisableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff94 	bl	8000dac <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff09 	bl	8000cb4 <__NVIC_ClearPendingIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	e159      	b.n	800117c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8148 	bne.w	8001176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d00b      	beq.n	8000f06 <HAL_GPIO_Init+0x5a>
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efa:	2b11      	cmp	r3, #17
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0xfc>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b12      	cmp	r3, #18
 8000fa6:	d123      	bne.n	8000ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	69b9      	ldr	r1, [r7, #24]
 8000fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0203 	and.w	r2, r3, #3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 80a2 	beq.w	8001176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a56      	ldr	r2, [pc, #344]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b54      	ldr	r3, [pc, #336]	; (8001194 <HAL_GPIO_Init+0x2e8>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800104e:	4a52      	ldr	r2, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	220f      	movs	r2, #15
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a49      	ldr	r2, [pc, #292]	; (800119c <HAL_GPIO_Init+0x2f0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_GPIO_Init+0x202>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <HAL_GPIO_Init+0x2f4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0x1fe>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a47      	ldr	r2, [pc, #284]	; (80011a4 <HAL_GPIO_Init+0x2f8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00d      	beq.n	80010a6 <HAL_GPIO_Init+0x1fa>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a46      	ldr	r2, [pc, #280]	; (80011a8 <HAL_GPIO_Init+0x2fc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x1f6>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a45      	ldr	r2, [pc, #276]	; (80011ac <HAL_GPIO_Init+0x300>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_GPIO_Init+0x1f2>
 800109a:	2304      	movs	r3, #4
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 800109e:	2307      	movs	r3, #7
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x204>
 80010ae:	2300      	movs	r3, #0
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c0:	4935      	ldr	r1, [pc, #212]	; (8001198 <HAL_GPIO_Init+0x2ec>)
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x304>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111c:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	f67f aea2 	bls.w	8000ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3724      	adds	r7, #36	; 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	401a      	ands	r2, r3
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d104      	bne.n	800120a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	041a      	lsls	r2, r3, #16
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001208:	e002      	b.n	8001210 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	619a      	str	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	4618      	mov	r0, r3
 800123c:	f001 f89f 	bl	800237e <HAL_GPIO_EXTI_Callback>
  }
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e25b      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	4ba3      	ldr	r3, [pc, #652]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4ba0      	ldr	r3, [pc, #640]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b9d      	ldr	r3, [pc, #628]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b99      	ldr	r3, [pc, #612]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e236      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b91      	ldr	r3, [pc, #580]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a90      	ldr	r2, [pc, #576]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a8a      	ldr	r2, [pc, #552]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a87      	ldr	r2, [pc, #540]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b84      	ldr	r3, [pc, #528]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a83      	ldr	r2, [pc, #524]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b81      	ldr	r3, [pc, #516]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a80      	ldr	r2, [pc, #512]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc56 	bl	8000bb4 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fc52 	bl	8000bb4 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1fb      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b76      	ldr	r3, [pc, #472]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc42 	bl	8000bb4 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fc3e 	bl	8000bb4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1e7      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b6c      	ldr	r3, [pc, #432]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	4b65      	ldr	r3, [pc, #404]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b5c      	ldr	r3, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1bb      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4952      	ldr	r1, [pc, #328]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <HAL_RCC_OscConfig+0x2b0>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fbf7 	bl	8000bb4 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fbf3 	bl	8000bb4 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e19c      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4940      	ldr	r1, [pc, #256]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <HAL_RCC_OscConfig+0x2b0>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fbd6 	bl	8000bb4 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fbd2 	bl	8000bb4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e17b      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d030      	beq.n	8001498 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_RCC_OscConfig+0x2b4>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fbb6 	bl	8000bb4 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fbb2 	bl	8000bb4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e15b      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e015      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_RCC_OscConfig+0x2b4>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fb9f 	bl	8000bb4 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fb9b 	bl	8000bb4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e144      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a0 	beq.w	80015e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x2b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d121      	bne.n	8001526 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_RCC_OscConfig+0x2b8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_RCC_OscConfig+0x2b8>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb61 	bl	8000bb4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e011      	b.n	800151a <HAL_RCC_OscConfig+0x2ce>
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470000 	.word	0x42470000
 8001500:	42470e80 	.word	0x42470e80
 8001504:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001508:	f7ff fb54 	bl	8000bb4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0fd      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b81      	ldr	r3, [pc, #516]	; (8001720 <HAL_RCC_OscConfig+0x4d4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x2f0>
 800152e:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a7c      	ldr	r2, [pc, #496]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	e01c      	b.n	8001576 <HAL_RCC_OscConfig+0x32a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x312>
 8001544:	4b77      	ldr	r3, [pc, #476]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a76      	ldr	r2, [pc, #472]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b74      	ldr	r3, [pc, #464]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a73      	ldr	r2, [pc, #460]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x32a>
 800155e:	4b71      	ldr	r3, [pc, #452]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
 800156a:	4b6e      	ldr	r3, [pc, #440]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a6d      	ldr	r2, [pc, #436]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fb19 	bl	8000bb4 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fb15 	bl	8000bb4 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0bc      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	4b61      	ldr	r3, [pc, #388]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ee      	beq.n	8001586 <HAL_RCC_OscConfig+0x33a>
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fb03 	bl	8000bb4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff faff 	bl	8000bb4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0a6      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4b56      	ldr	r3, [pc, #344]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015da:	4b52      	ldr	r3, [pc, #328]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a51      	ldr	r2, [pc, #324]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 80015e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8092 	beq.w	8001714 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f0:	4b4c      	ldr	r3, [pc, #304]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d05c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d141      	bne.n	8001688 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fad3 	bl	8000bb4 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff facf 	bl	8000bb4 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e078      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69da      	ldr	r2, [r3, #28]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	019b      	lsls	r3, r3, #6
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	3b01      	subs	r3, #1
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	061b      	lsls	r3, r3, #24
 8001654:	4933      	ldr	r1, [pc, #204]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165a:	4b33      	ldr	r3, [pc, #204]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff faa8 	bl	8000bb4 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff faa4 	bl	8000bb4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e04d      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x41c>
 8001686:	e045      	b.n	8001714 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fa91 	bl	8000bb4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff fa8d 	bl	8000bb4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e036      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x44a>
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e029      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_RCC_OscConfig+0x4d8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d115      	bne.n	8001710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d10d      	bne.n	8001710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d106      	bne.n	8001710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000
 8001724:	40023800 	.word	0x40023800
 8001728:	42470060 	.word	0x42470060

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff f9ca 	bl	8000bb4 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff f9c6 	bl	8000bb4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f92a 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	08003ad8 	.word	0x08003ad8
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fe:	2100      	movs	r1, #0
 8001900:	6079      	str	r1, [r7, #4]
 8001902:	2100      	movs	r1, #0
 8001904:	60f9      	str	r1, [r7, #12]
 8001906:	2100      	movs	r1, #0
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800190a:	2100      	movs	r1, #0
 800190c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190e:	4952      	ldr	r1, [pc, #328]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001910:	6889      	ldr	r1, [r1, #8]
 8001912:	f001 010c 	and.w	r1, r1, #12
 8001916:	2908      	cmp	r1, #8
 8001918:	d00d      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x3e>
 800191a:	2908      	cmp	r1, #8
 800191c:	f200 8094 	bhi.w	8001a48 <HAL_RCC_GetSysClockFreq+0x150>
 8001920:	2900      	cmp	r1, #0
 8001922:	d002      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x32>
 8001924:	2904      	cmp	r1, #4
 8001926:	d003      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x38>
 8001928:	e08e      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x164>)
 800192c:	60bb      	str	r3, [r7, #8]
       break;
 800192e:	e08e      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001930:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x168>)
 8001932:	60bb      	str	r3, [r7, #8]
      break;
 8001934:	e08b      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001936:	4948      	ldr	r1, [pc, #288]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001938:	6849      	ldr	r1, [r1, #4]
 800193a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800193e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001940:	4945      	ldr	r1, [pc, #276]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001942:	6849      	ldr	r1, [r1, #4]
 8001944:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001948:	2900      	cmp	r1, #0
 800194a:	d024      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194c:	4942      	ldr	r1, [pc, #264]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x160>)
 800194e:	6849      	ldr	r1, [r1, #4]
 8001950:	0989      	lsrs	r1, r1, #6
 8001952:	4608      	mov	r0, r1
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	f240 14ff 	movw	r4, #511	; 0x1ff
 800195c:	f04f 0500 	mov.w	r5, #0
 8001960:	ea00 0204 	and.w	r2, r0, r4
 8001964:	ea01 0305 	and.w	r3, r1, r5
 8001968:	493d      	ldr	r1, [pc, #244]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x168>)
 800196a:	fb01 f003 	mul.w	r0, r1, r3
 800196e:	2100      	movs	r1, #0
 8001970:	fb01 f102 	mul.w	r1, r1, r2
 8001974:	1844      	adds	r4, r0, r1
 8001976:	493a      	ldr	r1, [pc, #232]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x168>)
 8001978:	fba2 0101 	umull	r0, r1, r2, r1
 800197c:	1863      	adds	r3, r4, r1
 800197e:	4619      	mov	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	461a      	mov	r2, r3
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	f7fe fc82 	bl	8000290 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e04a      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	461a      	mov	r2, r3
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019a6:	f04f 0100 	mov.w	r1, #0
 80019aa:	ea02 0400 	and.w	r4, r2, r0
 80019ae:	ea03 0501 	and.w	r5, r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	014b      	lsls	r3, r1, #5
 80019c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c4:	0142      	lsls	r2, r0, #5
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	1b00      	subs	r0, r0, r4
 80019cc:	eb61 0105 	sbc.w	r1, r1, r5
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	018b      	lsls	r3, r1, #6
 80019da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019de:	0182      	lsls	r2, r0, #6
 80019e0:	1a12      	subs	r2, r2, r0
 80019e2:	eb63 0301 	sbc.w	r3, r3, r1
 80019e6:	f04f 0000 	mov.w	r0, #0
 80019ea:	f04f 0100 	mov.w	r1, #0
 80019ee:	00d9      	lsls	r1, r3, #3
 80019f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019f4:	00d0      	lsls	r0, r2, #3
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	1912      	adds	r2, r2, r4
 80019fc:	eb45 0303 	adc.w	r3, r5, r3
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	0299      	lsls	r1, r3, #10
 8001a0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a0e:	0290      	lsls	r0, r2, #10
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f7fe fc36 	bl	8000290 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	3301      	adds	r3, #1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	60bb      	str	r3, [r7, #8]
      break;
 8001a46:	e002      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x164>)
 8001a4a:	60bb      	str	r3, [r7, #8]
      break;
 8001a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdb0      	pop	{r4, r5, r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	00f42400 	.word	0x00f42400
 8001a60:	017d7840 	.word	0x017d7840

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000

08001a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	0a9b      	lsrs	r3, r3, #10
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a92:	5ccb      	ldrb	r3, [r1, r3]
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	08003ae8 	.word	0x08003ae8

08001aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aa8:	f7ff ffdc 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0b5b      	lsrs	r3, r3, #13
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08003ae8 	.word	0x08003ae8

08001acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e03f      	b.n	8001b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7fe feb0 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2224      	movs	r2, #36	; 0x24
 8001afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f829 	bl	8001b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b6c:	b0bd      	sub	sp, #244	; 0xf4
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b84:	68d9      	ldr	r1, [r3, #12]
 8001b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	ea40 0301 	orr.w	r3, r0, r1
 8001b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8001bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001bc0:	f021 010c 	bic.w	r1, r1, #12
 8001bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001be2:	6999      	ldr	r1, [r3, #24]
 8001be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	ea40 0301 	orr.w	r3, r0, r1
 8001bee:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfa:	f040 81a5 	bne.w	8001f48 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4bcd      	ldr	r3, [pc, #820]	; (8001f3c <UART_SetConfig+0x3d4>)
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d006      	beq.n	8001c18 <UART_SetConfig+0xb0>
 8001c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4bcb      	ldr	r3, [pc, #812]	; (8001f40 <UART_SetConfig+0x3d8>)
 8001c12:	429a      	cmp	r2, r3
 8001c14:	f040 80cb 	bne.w	8001dae <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c18:	f7ff ff44 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 8001c1c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c24:	461c      	mov	r4, r3
 8001c26:	f04f 0500 	mov.w	r5, #0
 8001c2a:	4622      	mov	r2, r4
 8001c2c:	462b      	mov	r3, r5
 8001c2e:	1891      	adds	r1, r2, r2
 8001c30:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001c34:	415b      	adcs	r3, r3
 8001c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c3a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c3e:	1912      	adds	r2, r2, r4
 8001c40:	eb45 0303 	adc.w	r3, r5, r3
 8001c44:	f04f 0000 	mov.w	r0, #0
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	00d9      	lsls	r1, r3, #3
 8001c4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c52:	00d0      	lsls	r0, r2, #3
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	1911      	adds	r1, r2, r4
 8001c5a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8001c5e:	416b      	adcs	r3, r5
 8001c60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	1891      	adds	r1, r2, r2
 8001c72:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001c76:	415b      	adcs	r3, r3
 8001c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c7c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001c80:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001c84:	f7fe fb04 	bl	8000290 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4bad      	ldr	r3, [pc, #692]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	011e      	lsls	r6, r3, #4
 8001c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001c9a:	461c      	mov	r4, r3
 8001c9c:	f04f 0500 	mov.w	r5, #0
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	1891      	adds	r1, r2, r2
 8001ca6:	67b9      	str	r1, [r7, #120]	; 0x78
 8001ca8:	415b      	adcs	r3, r3
 8001caa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001cb0:	1912      	adds	r2, r2, r4
 8001cb2:	eb45 0303 	adc.w	r3, r5, r3
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	00d9      	lsls	r1, r3, #3
 8001cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cc4:	00d0      	lsls	r0, r2, #3
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	1911      	adds	r1, r2, r4
 8001ccc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8001cd0:	416b      	adcs	r3, r5
 8001cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	1891      	adds	r1, r2, r2
 8001ce4:	6739      	str	r1, [r7, #112]	; 0x70
 8001ce6:	415b      	adcs	r3, r3
 8001ce8:	677b      	str	r3, [r7, #116]	; 0x74
 8001cea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001cee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001cf2:	f7fe facd 	bl	8000290 <__aeabi_uldivmod>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4b92      	ldr	r3, [pc, #584]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	2164      	movs	r1, #100	; 0x64
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	3332      	adds	r3, #50	; 0x32
 8001d0e:	4a8d      	ldr	r2, [pc, #564]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d1c:	441e      	add	r6, r3
 8001d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001d22:	4618      	mov	r0, r3
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	1894      	adds	r4, r2, r2
 8001d2e:	66bc      	str	r4, [r7, #104]	; 0x68
 8001d30:	415b      	adcs	r3, r3
 8001d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d38:	1812      	adds	r2, r2, r0
 8001d3a:	eb41 0303 	adc.w	r3, r1, r3
 8001d3e:	f04f 0400 	mov.w	r4, #0
 8001d42:	f04f 0500 	mov.w	r5, #0
 8001d46:	00dd      	lsls	r5, r3, #3
 8001d48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001d4c:	00d4      	lsls	r4, r2, #3
 8001d4e:	4622      	mov	r2, r4
 8001d50:	462b      	mov	r3, r5
 8001d52:	1814      	adds	r4, r2, r0
 8001d54:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8001d58:	414b      	adcs	r3, r1
 8001d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	1891      	adds	r1, r2, r2
 8001d6c:	6639      	str	r1, [r7, #96]	; 0x60
 8001d6e:	415b      	adcs	r3, r3
 8001d70:	667b      	str	r3, [r7, #100]	; 0x64
 8001d72:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d7a:	f7fe fa89 	bl	8000290 <__aeabi_uldivmod>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4b70      	ldr	r3, [pc, #448]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001d84:	fba3 1302 	umull	r1, r3, r3, r2
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	2164      	movs	r1, #100	; 0x64
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	3332      	adds	r3, #50	; 0x32
 8001d96:	4a6b      	ldr	r2, [pc, #428]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	095b      	lsrs	r3, r3, #5
 8001d9e:	f003 0207 	and.w	r2, r3, #7
 8001da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4432      	add	r2, r6
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e26d      	b.n	800228a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dae:	f7ff fe65 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 8001db2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001db6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001dba:	461c      	mov	r4, r3
 8001dbc:	f04f 0500 	mov.w	r5, #0
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	462b      	mov	r3, r5
 8001dc4:	1891      	adds	r1, r2, r2
 8001dc6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001dc8:	415b      	adcs	r3, r3
 8001dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dd0:	1912      	adds	r2, r2, r4
 8001dd2:	eb45 0303 	adc.w	r3, r5, r3
 8001dd6:	f04f 0000 	mov.w	r0, #0
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	00d9      	lsls	r1, r3, #3
 8001de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001de4:	00d0      	lsls	r0, r2, #3
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	1911      	adds	r1, r2, r4
 8001dec:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8001df0:	416b      	adcs	r3, r5
 8001df2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	1891      	adds	r1, r2, r2
 8001e04:	6539      	str	r1, [r7, #80]	; 0x50
 8001e06:	415b      	adcs	r3, r3
 8001e08:	657b      	str	r3, [r7, #84]	; 0x54
 8001e0a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e0e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001e12:	f7fe fa3d 	bl	8000290 <__aeabi_uldivmod>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001e1c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e20:	095b      	lsrs	r3, r3, #5
 8001e22:	011e      	lsls	r6, r3, #4
 8001e24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001e28:	461c      	mov	r4, r3
 8001e2a:	f04f 0500 	mov.w	r5, #0
 8001e2e:	4622      	mov	r2, r4
 8001e30:	462b      	mov	r3, r5
 8001e32:	1891      	adds	r1, r2, r2
 8001e34:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e36:	415b      	adcs	r3, r3
 8001e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e3e:	1912      	adds	r2, r2, r4
 8001e40:	eb45 0303 	adc.w	r3, r5, r3
 8001e44:	f04f 0000 	mov.w	r0, #0
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	00d9      	lsls	r1, r3, #3
 8001e4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e52:	00d0      	lsls	r0, r2, #3
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	1911      	adds	r1, r2, r4
 8001e5a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001e5e:	416b      	adcs	r3, r5
 8001e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	1891      	adds	r1, r2, r2
 8001e72:	6439      	str	r1, [r7, #64]	; 0x40
 8001e74:	415b      	adcs	r3, r3
 8001e76:	647b      	str	r3, [r7, #68]	; 0x44
 8001e78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e7c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001e80:	f7fe fa06 	bl	8000290 <__aeabi_uldivmod>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2164      	movs	r1, #100	; 0x64
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	3332      	adds	r3, #50	; 0x32
 8001e9c:	4a29      	ldr	r2, [pc, #164]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001eaa:	441e      	add	r6, r3
 8001eac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f04f 0100 	mov.w	r1, #0
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	1894      	adds	r4, r2, r2
 8001ebc:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ebe:	415b      	adcs	r3, r3
 8001ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ec6:	1812      	adds	r2, r2, r0
 8001ec8:	eb41 0303 	adc.w	r3, r1, r3
 8001ecc:	f04f 0400 	mov.w	r4, #0
 8001ed0:	f04f 0500 	mov.w	r5, #0
 8001ed4:	00dd      	lsls	r5, r3, #3
 8001ed6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001eda:	00d4      	lsls	r4, r2, #3
 8001edc:	4622      	mov	r2, r4
 8001ede:	462b      	mov	r3, r5
 8001ee0:	1814      	adds	r4, r2, r0
 8001ee2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8001ee6:	414b      	adcs	r3, r1
 8001ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	1891      	adds	r1, r2, r2
 8001efa:	6339      	str	r1, [r7, #48]	; 0x30
 8001efc:	415b      	adcs	r3, r3
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
 8001f00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f04:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f08:	f7fe f9c2 	bl	8000290 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001f12:	fba3 1302 	umull	r1, r3, r3, r2
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2164      	movs	r1, #100	; 0x64
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	3332      	adds	r3, #50	; 0x32
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <UART_SetConfig+0x3dc>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	f003 0207 	and.w	r2, r3, #7
 8001f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4432      	add	r2, r6
 8001f38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f3a:	e1a6      	b.n	800228a <UART_SetConfig+0x722>
 8001f3c:	40011000 	.word	0x40011000
 8001f40:	40011400 	.word	0x40011400
 8001f44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4bd1      	ldr	r3, [pc, #836]	; (8002294 <UART_SetConfig+0x72c>)
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d006      	beq.n	8001f62 <UART_SetConfig+0x3fa>
 8001f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4bcf      	ldr	r3, [pc, #828]	; (8002298 <UART_SetConfig+0x730>)
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 80ca 	bne.w	80020f6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f62:	f7ff fd9f 	bl	8001aa4 <HAL_RCC_GetPCLK2Freq>
 8001f66:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f6e:	461c      	mov	r4, r3
 8001f70:	f04f 0500 	mov.w	r5, #0
 8001f74:	4622      	mov	r2, r4
 8001f76:	462b      	mov	r3, r5
 8001f78:	1891      	adds	r1, r2, r2
 8001f7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f7c:	415b      	adcs	r3, r3
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f84:	1912      	adds	r2, r2, r4
 8001f86:	eb45 0303 	adc.w	r3, r5, r3
 8001f8a:	f04f 0000 	mov.w	r0, #0
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	00d9      	lsls	r1, r3, #3
 8001f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f98:	00d0      	lsls	r0, r2, #3
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	eb12 0a04 	adds.w	sl, r2, r4
 8001fa2:	eb43 0b05 	adc.w	fp, r3, r5
 8001fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	008b      	lsls	r3, r1, #2
 8001fbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001fc0:	0082      	lsls	r2, r0, #2
 8001fc2:	4650      	mov	r0, sl
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	f7fe f963 	bl	8000290 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4bb3      	ldr	r3, [pc, #716]	; (800229c <UART_SetConfig+0x734>)
 8001fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	011e      	lsls	r6, r3, #4
 8001fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	1894      	adds	r4, r2, r2
 8001fe8:	623c      	str	r4, [r7, #32]
 8001fea:	415b      	adcs	r3, r3
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ff2:	1812      	adds	r2, r2, r0
 8001ff4:	eb41 0303 	adc.w	r3, r1, r3
 8001ff8:	f04f 0400 	mov.w	r4, #0
 8001ffc:	f04f 0500 	mov.w	r5, #0
 8002000:	00dd      	lsls	r5, r3, #3
 8002002:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002006:	00d4      	lsls	r4, r2, #3
 8002008:	4622      	mov	r2, r4
 800200a:	462b      	mov	r3, r5
 800200c:	1814      	adds	r4, r2, r0
 800200e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002012:	414b      	adcs	r3, r1
 8002014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	008b      	lsls	r3, r1, #2
 800202e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002032:	0082      	lsls	r2, r0, #2
 8002034:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002038:	f7fe f92a 	bl	8000290 <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4b96      	ldr	r3, [pc, #600]	; (800229c <UART_SetConfig+0x734>)
 8002042:	fba3 1302 	umull	r1, r3, r3, r2
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2164      	movs	r1, #100	; 0x64
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	3332      	adds	r3, #50	; 0x32
 8002054:	4a91      	ldr	r2, [pc, #580]	; (800229c <UART_SetConfig+0x734>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002060:	441e      	add	r6, r3
 8002062:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002066:	4618      	mov	r0, r3
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	1894      	adds	r4, r2, r2
 8002072:	61bc      	str	r4, [r7, #24]
 8002074:	415b      	adcs	r3, r3
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800207c:	1812      	adds	r2, r2, r0
 800207e:	eb41 0303 	adc.w	r3, r1, r3
 8002082:	f04f 0400 	mov.w	r4, #0
 8002086:	f04f 0500 	mov.w	r5, #0
 800208a:	00dd      	lsls	r5, r3, #3
 800208c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002090:	00d4      	lsls	r4, r2, #3
 8002092:	4622      	mov	r2, r4
 8002094:	462b      	mov	r3, r5
 8002096:	1814      	adds	r4, r2, r0
 8002098:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800209c:	414b      	adcs	r3, r1
 800209e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80020a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	008b      	lsls	r3, r1, #2
 80020b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020bc:	0082      	lsls	r2, r0, #2
 80020be:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80020c2:	f7fe f8e5 	bl	8000290 <__aeabi_uldivmod>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4b74      	ldr	r3, [pc, #464]	; (800229c <UART_SetConfig+0x734>)
 80020cc:	fba3 1302 	umull	r1, r3, r3, r2
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	2164      	movs	r1, #100	; 0x64
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	3332      	adds	r3, #50	; 0x32
 80020de:	4a6f      	ldr	r2, [pc, #444]	; (800229c <UART_SetConfig+0x734>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	f003 020f 	and.w	r2, r3, #15
 80020ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4432      	add	r2, r6
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e0c9      	b.n	800228a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80020f6:	f7ff fcc1 	bl	8001a7c <HAL_RCC_GetPCLK1Freq>
 80020fa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002102:	461c      	mov	r4, r3
 8002104:	f04f 0500 	mov.w	r5, #0
 8002108:	4622      	mov	r2, r4
 800210a:	462b      	mov	r3, r5
 800210c:	1891      	adds	r1, r2, r2
 800210e:	6139      	str	r1, [r7, #16]
 8002110:	415b      	adcs	r3, r3
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002118:	1912      	adds	r2, r2, r4
 800211a:	eb45 0303 	adc.w	r3, r5, r3
 800211e:	f04f 0000 	mov.w	r0, #0
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	00d9      	lsls	r1, r3, #3
 8002128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800212c:	00d0      	lsls	r0, r2, #3
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	eb12 0804 	adds.w	r8, r2, r4
 8002136:	eb43 0905 	adc.w	r9, r3, r5
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4618      	mov	r0, r3
 8002142:	f04f 0100 	mov.w	r1, #0
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	008b      	lsls	r3, r1, #2
 8002150:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002154:	0082      	lsls	r2, r0, #2
 8002156:	4640      	mov	r0, r8
 8002158:	4649      	mov	r1, r9
 800215a:	f7fe f899 	bl	8000290 <__aeabi_uldivmod>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4b4e      	ldr	r3, [pc, #312]	; (800229c <UART_SetConfig+0x734>)
 8002164:	fba3 2302 	umull	r2, r3, r3, r2
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	011e      	lsls	r6, r3, #4
 800216c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002170:	4618      	mov	r0, r3
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	1894      	adds	r4, r2, r2
 800217c:	60bc      	str	r4, [r7, #8]
 800217e:	415b      	adcs	r3, r3
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002186:	1812      	adds	r2, r2, r0
 8002188:	eb41 0303 	adc.w	r3, r1, r3
 800218c:	f04f 0400 	mov.w	r4, #0
 8002190:	f04f 0500 	mov.w	r5, #0
 8002194:	00dd      	lsls	r5, r3, #3
 8002196:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800219a:	00d4      	lsls	r4, r2, #3
 800219c:	4622      	mov	r2, r4
 800219e:	462b      	mov	r3, r5
 80021a0:	1814      	adds	r4, r2, r0
 80021a2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80021a6:	414b      	adcs	r3, r1
 80021a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	008b      	lsls	r3, r1, #2
 80021c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80021c6:	0082      	lsls	r2, r0, #2
 80021c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021cc:	f7fe f860 	bl	8000290 <__aeabi_uldivmod>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <UART_SetConfig+0x734>)
 80021d6:	fba3 1302 	umull	r1, r3, r3, r2
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2164      	movs	r1, #100	; 0x64
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	3332      	adds	r3, #50	; 0x32
 80021e8:	4a2c      	ldr	r2, [pc, #176]	; (800229c <UART_SetConfig+0x734>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f4:	441e      	add	r6, r3
 80021f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80021fa:	4618      	mov	r0, r3
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	1894      	adds	r4, r2, r2
 8002206:	603c      	str	r4, [r7, #0]
 8002208:	415b      	adcs	r3, r3
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002210:	1812      	adds	r2, r2, r0
 8002212:	eb41 0303 	adc.w	r3, r1, r3
 8002216:	f04f 0400 	mov.w	r4, #0
 800221a:	f04f 0500 	mov.w	r5, #0
 800221e:	00dd      	lsls	r5, r3, #3
 8002220:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002224:	00d4      	lsls	r4, r2, #3
 8002226:	4622      	mov	r2, r4
 8002228:	462b      	mov	r3, r5
 800222a:	1814      	adds	r4, r2, r0
 800222c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002230:	414b      	adcs	r3, r1
 8002232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	008b      	lsls	r3, r1, #2
 800224c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002250:	0082      	lsls	r2, r0, #2
 8002252:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002256:	f7fe f81b 	bl	8000290 <__aeabi_uldivmod>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <UART_SetConfig+0x734>)
 8002260:	fba3 1302 	umull	r1, r3, r3, r2
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	2164      	movs	r1, #100	; 0x64
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	3332      	adds	r3, #50	; 0x32
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <UART_SetConfig+0x734>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	095b      	lsrs	r3, r3, #5
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4432      	add	r2, r6
 8002286:	609a      	str	r2, [r3, #8]
}
 8002288:	e7ff      	b.n	800228a <UART_SetConfig+0x722>
 800228a:	bf00      	nop
 800228c:	37f4      	adds	r7, #244	; 0xf4
 800228e:	46bd      	mov	sp, r7
 8002290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002294:	40011000 	.word	0x40011000
 8002298:	40011400 	.word	0x40011400
 800229c:	51eb851f 	.word	0x51eb851f

080022a0 <app_switch_interrupt>:
#define APP_UART_BUFFER_MAX   64

static bool app_started = false;

void app_switch_interrupt(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	static uint32_t deboucing_time_ms = 0;

	if(!app_started)
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <app_switch_interrupt+0x34>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <app_switch_interrupt+0x2e>
		return;

	if((hw_tick_ms_get() - deboucing_time_ms) >= APP_DEBOUCING_TIME_MS)
 80022b2:	f000 f87f 	bl	80023b4 <hw_tick_ms_get>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <app_switch_interrupt+0x38>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b31      	cmp	r3, #49	; 0x31
 80022c0:	d906      	bls.n	80022d0 <app_switch_interrupt+0x30>
	{
		deboucing_time_ms = hw_tick_ms_get();
 80022c2:	f000 f877 	bl	80023b4 <hw_tick_ms_get>
 80022c6:	4603      	mov	r3, r0
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <app_switch_interrupt+0x38>)
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e000      	b.n	80022d0 <app_switch_interrupt+0x30>
		return;
 80022ce:	bf00      	nop
	}
}
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000090 	.word	0x20000090
 80022d8:	20000094 	.word	0x20000094

080022dc <app_tick_1ms>:

void app_tick_1ms(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
	if(!app_started)
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <app_tick_1ms+0x18>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
		return;
}
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20000090 	.word	0x20000090

080022f8 <app_init>:

void app_init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	shell_init();
 80022fc:	f000 fa78 	bl	80027f0 <shell_init>
	app_started = true;
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <app_init+0x14>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000090 	.word	0x20000090

08002310 <app_loop>:

void app_loop(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <cbf_put>:

	return CBF_OK;
}

cbf_status_t cbf_put(cbf_t *cb, uint8_t c)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
	uint16_t next_prod = CBF_INC(cb->prod,cb->size);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	8892      	ldrh	r2, [r2, #4]
 8002336:	4293      	cmp	r3, r2
 8002338:	da05      	bge.n	8002346 <cbf_put+0x28>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	3301      	adds	r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	e000      	b.n	8002348 <cbf_put+0x2a>
 8002346:	2300      	movs	r3, #0
 8002348:	81fb      	strh	r3, [r7, #14]

	if(next_prod == cb->cons)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	885b      	ldrh	r3, [r3, #2]
 800234e:	b29b      	uxth	r3, r3
 8002350:	89fa      	ldrh	r2, [r7, #14]
 8002352:	429a      	cmp	r2, r3
 8002354:	d101      	bne.n	800235a <cbf_put+0x3c>
		return CBF_FULL;
 8002356:	2301      	movs	r3, #1
 8002358:	e00b      	b.n	8002372 <cbf_put+0x54>

	cb->buffer[cb->prod] = c;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	8812      	ldrh	r2, [r2, #0]
 8002362:	b292      	uxth	r2, r2
 8002364:	4413      	add	r3, r2
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	701a      	strb	r2, [r3, #0]
	cb->prod = next_prod;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	89fa      	ldrh	r2, [r7, #14]
 800236e:	801a      	strh	r2, [r3, #0]

	return CBF_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_EXTI_Callback>:
extern UART_HandleTypeDef huart2;

static cbf_t *hw_uart_cbf = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_EXTI_Callback+0x14>
	{
		app_switch_interrupt();
 800238e:	f7ff ff87 	bl	80022a0 <app_switch_interrupt>
	}
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <hw_led_toggle>:
	else
		return false;
}

void hw_led_toggle(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 80023a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <hw_led_toggle+0x14>)
 80023a6:	f7fe ff1e 	bl	80011e6 <HAL_GPIO_TogglePin>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40020800 	.word	0x40020800

080023b4 <hw_tick_ms_get>:
{
	HAL_Delay(time_ms);
}

uint32_t hw_tick_ms_get(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80023b8:	f7fe fbfc 	bl	8000bb4 <HAL_GetTick>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <hw_uart2_interrupt>:

	hw_uart_enable_interrupts();
}

void hw_uart2_interrupt(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = huart2.Instance; // hardcoded, pode ser melhorado
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <hw_uart2_interrupt+0x58>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60bb      	str	r3, [r7, #8]

	// ler o status register e trata erros até que desapareçam
	// (o manual manda ler o SR e em seguida DR em caso de erro)
	sr = h->SR;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 80023d6:	e005      	b.n	80023e4 <hw_uart2_interrupt+0x20>
	{
		sr = h->SR;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	71fb      	strb	r3, [r7, #7]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f4      	bne.n	80023d8 <hw_uart2_interrupt+0x14>
	}

	// se sem erros e com dado recebido ... pegar o dado e colocar no buffer
	if(sr & UART_FLAG_RXNE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <hw_uart2_interrupt+0x50>
	{
		c = h->DR;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	71fb      	strb	r3, [r7, #7]

		if(hw_uart_cbf)
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <hw_uart2_interrupt+0x5c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <hw_uart2_interrupt+0x50>
			cbf_put(hw_uart_cbf,c);
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <hw_uart2_interrupt+0x5c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	79fa      	ldrb	r2, [r7, #7]
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff85 	bl	800231e <cbf_put>
	}
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000134 	.word	0x20000134
 8002420:	20000098 	.word	0x20000098

08002424 <shell_tick_1ms>:
static bool shell_started = false;
static shell_ctrl_t shell_ctrl = { 0 };
static uint32_t led_time_ms;

void shell_tick_1ms(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	static uint32_t led_time_cnt_ms = 0;

	if(!shell_started)
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <shell_tick_1ms+0x38>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d110      	bne.n	8002458 <shell_tick_1ms+0x34>
		return;

	led_time_cnt_ms++;
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <shell_tick_1ms+0x3c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	4a08      	ldr	r2, [pc, #32]	; (8002460 <shell_tick_1ms+0x3c>)
 800243e:	6013      	str	r3, [r2, #0]

	if(led_time_cnt_ms >= led_time_ms)
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <shell_tick_1ms+0x3c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <shell_tick_1ms+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d306      	bcc.n	800245a <shell_tick_1ms+0x36>
	{
		led_time_cnt_ms = 0;
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <shell_tick_1ms+0x3c>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
		hw_led_toggle();
 8002452:	f7ff ffa3 	bl	800239c <hw_led_toggle>
 8002456:	e000      	b.n	800245a <shell_tick_1ms+0x36>
		return;
 8002458:	bf00      	nop
	}
}
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000009c 	.word	0x2000009c
 8002460:	200000e8 	.word	0x200000e8
 8002464:	200000e4 	.word	0x200000e4

08002468 <shell_uart_tx_byte>:

static void shell_uart_tx_byte(uint8_t c)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	USART_TypeDef *h = huart1.Instance;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <shell_uart_tx_byte+0x30>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

	while(!(h->SR & UART_FLAG_TXE))
 8002478:	bf00      	nop
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f9      	beq.n	800247a <shell_uart_tx_byte+0x12>
	{}

	h->DR = c;
 8002486:	79fa      	ldrb	r2, [r7, #7]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200000f4 	.word	0x200000f4

0800249c <shell_uart_tx>:

void shell_uart_tx(uint8_t *buffer, uint32_t size)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	for(size_t pos = 0 ; pos < size ; pos++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e009      	b.n	80024c0 <shell_uart_tx+0x24>
		shell_uart_tx_byte(buffer[pos]);
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ffd7 	bl	8002468 <shell_uart_tx_byte>
	for(size_t pos = 0 ; pos < size ; pos++)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3301      	adds	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d3f1      	bcc.n	80024ac <shell_uart_tx+0x10>
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <shell_parse_args>:

uint32_t shell_parse_args(uint8_t * const cmdline, uint32_t size, uint32_t *argc, uint8_t *argv[], uint32_t max_args)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
    uint32_t n, m;

    n = m = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	617b      	str	r3, [r7, #20]
    *argc = 0;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

    while(cmdline[n] != '\0')
 80024f0:	e04d      	b.n	800258e <shell_parse_args+0xba>
    {
        // remove initial spaces, if any
        while(isspace(cmdline[n]) && n < size)
            cmdline[n++] = '\0';
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	617a      	str	r2, [r7, #20]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
        while(isspace(cmdline[n]) && n < size)
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	4413      	add	r3, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a30      	ldr	r2, [pc, #192]	; (80025cc <shell_parse_args+0xf8>)
 800250c:	4413      	add	r3, r2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <shell_parse_args+0x4c>
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	d3e8      	bcc.n	80024f2 <shell_parse_args+0x1e>

        // save where command/arguments starts
        m = n;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]

        // find end of command/parameters
        while(!isspace(cmdline[n]) && (n < size) && (cmdline[n] != '\0'))
 8002524:	e002      	b.n	800252c <shell_parse_args+0x58>
            n++;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
        while(!isspace(cmdline[n]) && (n < size) && (cmdline[n] != '\0'))
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	4413      	add	r3, r2
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a25      	ldr	r2, [pc, #148]	; (80025cc <shell_parse_args+0xf8>)
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <shell_parse_args+0x84>
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	d205      	bcs.n	8002558 <shell_parse_args+0x84>
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4413      	add	r3, r2
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e6      	bne.n	8002526 <shell_parse_args+0x52>

        // check end of string was reached, number of arguments reached or if we have an empty command
        if((n >= size) || (*argc >= max_args) || (m == n))
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	d21c      	bcs.n	800259a <shell_parse_args+0xc6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6a3a      	ldr	r2, [r7, #32]
 8002566:	429a      	cmp	r2, r3
 8002568:	d917      	bls.n	800259a <shell_parse_args+0xc6>
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	429a      	cmp	r2, r3
 8002570:	d013      	beq.n	800259a <shell_parse_args+0xc6>
            break;

        // save command/arguments
        argv[*argc] = cmdline + m;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	440a      	add	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
        *argc += 1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
    while(cmdline[n] != '\0')
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1b2      	bne.n	8002500 <shell_parse_args+0x2c>
    }

    // invalidate non used arguments
    for(n = *argc ; n < max_args ; n++)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e008      	b.n	80025b4 <shell_parse_args+0xe0>
        argv[n] = '\0';
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
    for(n = *argc ; n < max_args ; n++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3f2      	bcc.n	80025a2 <shell_parse_args+0xce>

    return *argc;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	08003af0 	.word	0x08003af0

080025d0 <shell_process>:

void shell_process(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af02      	add	r7, sp, #8
	uint32_t argc;
	uint8_t *argv[SHELL_MAX_ARGS];
	bool error = true;
 80025d6:	2301      	movs	r3, #1
 80025d8:	77fb      	strb	r3, [r7, #31]

	if(shell_parse_args(shell_ctrl.cmd,shell_ctrl.size,&argc,(uint8_t **)argv,SHELL_MAX_ARGS))
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <shell_process+0xec>)
 80025dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	f107 0218 	add.w	r2, r7, #24
 80025e4:	2005      	movs	r0, #5
 80025e6:	9000      	str	r0, [sp, #0]
 80025e8:	4834      	ldr	r0, [pc, #208]	; (80026bc <shell_process+0xec>)
 80025ea:	f7ff ff73 	bl	80024d4 <shell_parse_args>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d055      	beq.n	80026a0 <shell_process+0xd0>
	{
		if(argc == 3)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d12a      	bne.n	8002650 <shell_process+0x80>
		{
			if((strncmp("set",(char*)argv[0],3) == 0) &&
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	4619      	mov	r1, r3
 8002600:	482f      	ldr	r0, [pc, #188]	; (80026c0 <shell_process+0xf0>)
 8002602:	f000 f98b 	bl	800291c <strncmp>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d149      	bne.n	80026a0 <shell_process+0xd0>
			   (strncmp("time",(char*)argv[1],4) == 0))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2204      	movs	r2, #4
 8002610:	4619      	mov	r1, r3
 8002612:	482c      	ldr	r0, [pc, #176]	; (80026c4 <shell_process+0xf4>)
 8002614:	f000 f982 	bl	800291c <strncmp>
 8002618:	4603      	mov	r3, r0
			if((strncmp("set",(char*)argv[0],3) == 0) &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	d140      	bne.n	80026a0 <shell_process+0xd0>
			{
				int time_ms = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	603b      	str	r3, [r7, #0]

				if(sscanf((char*)argv[2],"%d",&time_ms) == 1)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	463a      	mov	r2, r7
 8002626:	4928      	ldr	r1, [pc, #160]	; (80026c8 <shell_process+0xf8>)
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f949 	bl	80028c0 <siscanf>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d135      	bne.n	80026a0 <shell_process+0xd0>
				{
					if(time_ms > 0)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	dd32      	ble.n	80026a0 <shell_process+0xd0>
					{
						led_time_ms = time_ms;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <shell_process+0xfc>)
 8002640:	601a      	str	r2, [r3, #0]
						shell_uart_tx((uint8_t*)"ok\n",3);
 8002642:	2103      	movs	r1, #3
 8002644:	4822      	ldr	r0, [pc, #136]	; (80026d0 <shell_process+0x100>)
 8002646:	f7ff ff29 	bl	800249c <shell_uart_tx>
						error = false;
 800264a:	2300      	movs	r3, #0
 800264c:	77fb      	strb	r3, [r7, #31]
 800264e:	e027      	b.n	80026a0 <shell_process+0xd0>
					}
				}
			}
		}
		else if(argc == 2)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d124      	bne.n	80026a0 <shell_process+0xd0>
		{
			if((strncmp("get",(char*)argv[0],3) == 0) &&
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2203      	movs	r2, #3
 800265a:	4619      	mov	r1, r3
 800265c:	481d      	ldr	r0, [pc, #116]	; (80026d4 <shell_process+0x104>)
 800265e:	f000 f95d 	bl	800291c <strncmp>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11b      	bne.n	80026a0 <shell_process+0xd0>
			   (strncmp("time",(char*)argv[1],4) == 0))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2204      	movs	r2, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4815      	ldr	r0, [pc, #84]	; (80026c4 <shell_process+0xf4>)
 8002670:	f000 f954 	bl	800291c <strncmp>
 8002674:	4603      	mov	r3, r0
			if((strncmp("get",(char*)argv[0],3) == 0) &&
 8002676:	2b00      	cmp	r3, #0
 8002678:	d112      	bne.n	80026a0 <shell_process+0xd0>
			{
				shell_ctrl.size = sprintf((char*)shell_ctrl.cmd,"time %u\n",(unsigned int)led_time_ms);
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <shell_process+0xfc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	4915      	ldr	r1, [pc, #84]	; (80026d8 <shell_process+0x108>)
 8002682:	480e      	ldr	r0, [pc, #56]	; (80026bc <shell_process+0xec>)
 8002684:	f000 f8fc 	bl	8002880 <siprintf>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <shell_process+0xec>)
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
				shell_uart_tx(shell_ctrl.cmd,shell_ctrl.size);
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <shell_process+0xec>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	4619      	mov	r1, r3
 8002696:	4809      	ldr	r0, [pc, #36]	; (80026bc <shell_process+0xec>)
 8002698:	f7ff ff00 	bl	800249c <shell_uart_tx>
				error = false;
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
			}
		}
	}

	if(error)
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <shell_process+0xe2>
	{
		shell_uart_tx((uint8_t*)"error\n",6);
 80026a6:	2106      	movs	r1, #6
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <shell_process+0x10c>)
 80026aa:	f7ff fef7 	bl	800249c <shell_uart_tx>
		error = false;
 80026ae:	2300      	movs	r3, #0
 80026b0:	77fb      	strb	r3, [r7, #31]
	}
}
 80026b2:	bf00      	nop
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200000a0 	.word	0x200000a0
 80026c0:	08003aa0 	.word	0x08003aa0
 80026c4:	08003aa4 	.word	0x08003aa4
 80026c8:	08003aac 	.word	0x08003aac
 80026cc:	200000e4 	.word	0x200000e4
 80026d0:	08003ab0 	.word	0x08003ab0
 80026d4:	08003ab4 	.word	0x08003ab4
 80026d8:	08003ab8 	.word	0x08003ab8
 80026dc:	08003ac4 	.word	0x08003ac4

080026e0 <shell_add_byte>:

void shell_add_byte(uint8_t c)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
	shell_ctrl.cmd[shell_ctrl.size++] = c;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <shell_add_byte+0x50>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	490f      	ldr	r1, [pc, #60]	; (8002730 <shell_add_byte+0x50>)
 80026f2:	640a      	str	r2, [r1, #64]	; 0x40
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <shell_add_byte+0x50>)
 80026f6:	79fa      	ldrb	r2, [r7, #7]
 80026f8:	54ca      	strb	r2, [r1, r3]

	// possivel comando completo encontrado
	if(c == '\n')
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	2b0a      	cmp	r3, #10
 80026fe:	d10b      	bne.n	8002718 <shell_add_byte+0x38>
	{
		shell_ctrl.cmd[shell_ctrl.size-1] = '\0';
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <shell_add_byte+0x50>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	3b01      	subs	r3, #1
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <shell_add_byte+0x50>)
 8002708:	2100      	movs	r1, #0
 800270a:	54d1      	strb	r1, [r2, r3]
		shell_process();
 800270c:	f7ff ff60 	bl	80025d0 <shell_process>
		shell_ctrl.size = 0;
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <shell_add_byte+0x50>)
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
	{
		// perda de sincronismo ou frame grande e errado
		if(shell_ctrl.size >= SHELL_UART_BUFFER_MAX)
			shell_ctrl.size = 0;
	}
}
 8002716:	e006      	b.n	8002726 <shell_add_byte+0x46>
		if(shell_ctrl.size >= SHELL_UART_BUFFER_MAX)
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <shell_add_byte+0x50>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b3f      	cmp	r3, #63	; 0x3f
 800271e:	d902      	bls.n	8002726 <shell_add_byte+0x46>
			shell_ctrl.size = 0;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <shell_add_byte+0x50>)
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200000a0 	.word	0x200000a0

08002734 <shell_uart_interrupt>:

void shell_uart_interrupt(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = huart1.Instance; // hardcoded, pode ser melhorado
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <shell_uart_interrupt+0x54>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60bb      	str	r3, [r7, #8]

	// ler o status register e trata erros até que desapareçam
	// (o manual manda ler o SR e em seguida DR em caso de erro)
	sr = h->SR;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8002746:	e005      	b.n	8002754 <shell_uart_interrupt+0x20>
	{
		sr = h->SR;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	71fb      	strb	r3, [r7, #7]
	while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f4      	bne.n	8002748 <shell_uart_interrupt+0x14>
	}

	// se sem erros e com dado recebido ... pegar o dado e colocar no buffer
	if(sr & UART_FLAG_RXNE)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <shell_uart_interrupt+0x4a>
	{
		c = h->DR;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	71fb      	strb	r3, [r7, #7]

		if(shell_started)
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <shell_uart_interrupt+0x58>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <shell_uart_interrupt+0x4a>
			shell_add_byte(c);
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ffb1 	bl	80026e0 <shell_add_byte>
	}
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200000f4 	.word	0x200000f4
 800278c:	2000009c 	.word	0x2000009c

08002790 <shell_disable_interrupts>:

void shell_disable_interrupts(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002794:	2025      	movs	r0, #37	; 0x25
 8002796:	f7fe fb60 	bl	8000e5a <HAL_NVIC_DisableIRQ>
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}

0800279e <shell_enable_interrupts>:

void shell_enable_interrupts(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2103      	movs	r1, #3
 80027a6:	2025      	movs	r0, #37	; 0x25
 80027a8:	f7fe fb2d 	bl	8000e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ac:	2025      	movs	r0, #37	; 0x25
 80027ae:	f7fe fb46 	bl	8000e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 80027b2:	2025      	movs	r0, #37	; 0x25
 80027b4:	f7fe fb6b 	bl	8000e8e <HAL_NVIC_ClearPendingIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}

080027bc <shell_uart_init>:

void shell_uart_init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	shell_disable_interrupts();
 80027c0:	f7ff ffe6 	bl	8002790 <shell_disable_interrupts>

    // habilitando interrupcoes para casos de erro
    // (Frame error, noise error, overrun error)
    huart1.Instance->CR3 |= USART_CR3_EIE;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <shell_uart_init+0x30>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <shell_uart_init+0x30>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	615a      	str	r2, [r3, #20]
    // habilitando interrupcoes para paridade e dados novos
    huart1.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <shell_uart_init+0x30>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <shell_uart_init+0x30>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80027e2:	60da      	str	r2, [r3, #12]

	shell_enable_interrupts();
 80027e4:	f7ff ffdb 	bl	800279e <shell_enable_interrupts>
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200000f4 	.word	0x200000f4

080027f0 <shell_init>:

void shell_init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	shell_ctrl.size = 0;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <shell_init+0x20>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
	led_time_ms = 100;
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <shell_init+0x24>)
 80027fc:	2264      	movs	r2, #100	; 0x64
 80027fe:	601a      	str	r2, [r3, #0]
	shell_uart_init();
 8002800:	f7ff ffdc 	bl	80027bc <shell_uart_init>

	shell_started = true;
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <shell_init+0x28>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200000a0 	.word	0x200000a0
 8002814:	200000e4 	.word	0x200000e4
 8002818:	2000009c 	.word	0x2000009c

0800281c <__errno>:
 800281c:	4b01      	ldr	r3, [pc, #4]	; (8002824 <__errno+0x8>)
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2000000c 	.word	0x2000000c

08002828 <__libc_init_array>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	4d0d      	ldr	r5, [pc, #52]	; (8002860 <__libc_init_array+0x38>)
 800282c:	4c0d      	ldr	r4, [pc, #52]	; (8002864 <__libc_init_array+0x3c>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	2600      	movs	r6, #0
 8002834:	42a6      	cmp	r6, r4
 8002836:	d109      	bne.n	800284c <__libc_init_array+0x24>
 8002838:	4d0b      	ldr	r5, [pc, #44]	; (8002868 <__libc_init_array+0x40>)
 800283a:	4c0c      	ldr	r4, [pc, #48]	; (800286c <__libc_init_array+0x44>)
 800283c:	f001 f924 	bl	8003a88 <_init>
 8002840:	1b64      	subs	r4, r4, r5
 8002842:	10a4      	asrs	r4, r4, #2
 8002844:	2600      	movs	r6, #0
 8002846:	42a6      	cmp	r6, r4
 8002848:	d105      	bne.n	8002856 <__libc_init_array+0x2e>
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002850:	4798      	blx	r3
 8002852:	3601      	adds	r6, #1
 8002854:	e7ee      	b.n	8002834 <__libc_init_array+0xc>
 8002856:	f855 3b04 	ldr.w	r3, [r5], #4
 800285a:	4798      	blx	r3
 800285c:	3601      	adds	r6, #1
 800285e:	e7f2      	b.n	8002846 <__libc_init_array+0x1e>
 8002860:	08003ca8 	.word	0x08003ca8
 8002864:	08003ca8 	.word	0x08003ca8
 8002868:	08003ca8 	.word	0x08003ca8
 800286c:	08003cac 	.word	0x08003cac

08002870 <memset>:
 8002870:	4402      	add	r2, r0
 8002872:	4603      	mov	r3, r0
 8002874:	4293      	cmp	r3, r2
 8002876:	d100      	bne.n	800287a <memset+0xa>
 8002878:	4770      	bx	lr
 800287a:	f803 1b01 	strb.w	r1, [r3], #1
 800287e:	e7f9      	b.n	8002874 <memset+0x4>

08002880 <siprintf>:
 8002880:	b40e      	push	{r1, r2, r3}
 8002882:	b500      	push	{lr}
 8002884:	b09c      	sub	sp, #112	; 0x70
 8002886:	ab1d      	add	r3, sp, #116	; 0x74
 8002888:	9002      	str	r0, [sp, #8]
 800288a:	9006      	str	r0, [sp, #24]
 800288c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002890:	4809      	ldr	r0, [pc, #36]	; (80028b8 <siprintf+0x38>)
 8002892:	9107      	str	r1, [sp, #28]
 8002894:	9104      	str	r1, [sp, #16]
 8002896:	4909      	ldr	r1, [pc, #36]	; (80028bc <siprintf+0x3c>)
 8002898:	f853 2b04 	ldr.w	r2, [r3], #4
 800289c:	9105      	str	r1, [sp, #20]
 800289e:	6800      	ldr	r0, [r0, #0]
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	a902      	add	r1, sp, #8
 80028a4:	f000 f8a8 	bl	80029f8 <_svfiprintf_r>
 80028a8:	9b02      	ldr	r3, [sp, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	b01c      	add	sp, #112	; 0x70
 80028b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028b4:	b003      	add	sp, #12
 80028b6:	4770      	bx	lr
 80028b8:	2000000c 	.word	0x2000000c
 80028bc:	ffff0208 	.word	0xffff0208

080028c0 <siscanf>:
 80028c0:	b40e      	push	{r1, r2, r3}
 80028c2:	b510      	push	{r4, lr}
 80028c4:	b09f      	sub	sp, #124	; 0x7c
 80028c6:	ac21      	add	r4, sp, #132	; 0x84
 80028c8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80028cc:	f854 2b04 	ldr.w	r2, [r4], #4
 80028d0:	9201      	str	r2, [sp, #4]
 80028d2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80028d6:	9004      	str	r0, [sp, #16]
 80028d8:	9008      	str	r0, [sp, #32]
 80028da:	f7fd fc81 	bl	80001e0 <strlen>
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <siscanf+0x50>)
 80028e0:	9005      	str	r0, [sp, #20]
 80028e2:	9009      	str	r0, [sp, #36]	; 0x24
 80028e4:	930d      	str	r3, [sp, #52]	; 0x34
 80028e6:	480b      	ldr	r0, [pc, #44]	; (8002914 <siscanf+0x54>)
 80028e8:	9a01      	ldr	r2, [sp, #4]
 80028ea:	6800      	ldr	r0, [r0, #0]
 80028ec:	9403      	str	r4, [sp, #12]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9311      	str	r3, [sp, #68]	; 0x44
 80028f2:	9316      	str	r3, [sp, #88]	; 0x58
 80028f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80028fc:	a904      	add	r1, sp, #16
 80028fe:	4623      	mov	r3, r4
 8002900:	f000 f9d4 	bl	8002cac <__ssvfiscanf_r>
 8002904:	b01f      	add	sp, #124	; 0x7c
 8002906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800290a:	b003      	add	sp, #12
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	08002919 	.word	0x08002919
 8002914:	2000000c 	.word	0x2000000c

08002918 <__seofread>:
 8002918:	2000      	movs	r0, #0
 800291a:	4770      	bx	lr

0800291c <strncmp>:
 800291c:	b510      	push	{r4, lr}
 800291e:	b16a      	cbz	r2, 800293c <strncmp+0x20>
 8002920:	3901      	subs	r1, #1
 8002922:	1884      	adds	r4, r0, r2
 8002924:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002928:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800292c:	4293      	cmp	r3, r2
 800292e:	d103      	bne.n	8002938 <strncmp+0x1c>
 8002930:	42a0      	cmp	r0, r4
 8002932:	d001      	beq.n	8002938 <strncmp+0x1c>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f5      	bne.n	8002924 <strncmp+0x8>
 8002938:	1a98      	subs	r0, r3, r2
 800293a:	bd10      	pop	{r4, pc}
 800293c:	4610      	mov	r0, r2
 800293e:	e7fc      	b.n	800293a <strncmp+0x1e>

08002940 <__ssputs_r>:
 8002940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002944:	688e      	ldr	r6, [r1, #8]
 8002946:	429e      	cmp	r6, r3
 8002948:	4682      	mov	sl, r0
 800294a:	460c      	mov	r4, r1
 800294c:	4690      	mov	r8, r2
 800294e:	461f      	mov	r7, r3
 8002950:	d838      	bhi.n	80029c4 <__ssputs_r+0x84>
 8002952:	898a      	ldrh	r2, [r1, #12]
 8002954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002958:	d032      	beq.n	80029c0 <__ssputs_r+0x80>
 800295a:	6825      	ldr	r5, [r4, #0]
 800295c:	6909      	ldr	r1, [r1, #16]
 800295e:	eba5 0901 	sub.w	r9, r5, r1
 8002962:	6965      	ldr	r5, [r4, #20]
 8002964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800296c:	3301      	adds	r3, #1
 800296e:	444b      	add	r3, r9
 8002970:	106d      	asrs	r5, r5, #1
 8002972:	429d      	cmp	r5, r3
 8002974:	bf38      	it	cc
 8002976:	461d      	movcc	r5, r3
 8002978:	0553      	lsls	r3, r2, #21
 800297a:	d531      	bpl.n	80029e0 <__ssputs_r+0xa0>
 800297c:	4629      	mov	r1, r5
 800297e:	f000 ffdf 	bl	8003940 <_malloc_r>
 8002982:	4606      	mov	r6, r0
 8002984:	b950      	cbnz	r0, 800299c <__ssputs_r+0x5c>
 8002986:	230c      	movs	r3, #12
 8002988:	f8ca 3000 	str.w	r3, [sl]
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002992:	81a3      	strh	r3, [r4, #12]
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800299c:	6921      	ldr	r1, [r4, #16]
 800299e:	464a      	mov	r2, r9
 80029a0:	f000 ff56 	bl	8003850 <memcpy>
 80029a4:	89a3      	ldrh	r3, [r4, #12]
 80029a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ae:	81a3      	strh	r3, [r4, #12]
 80029b0:	6126      	str	r6, [r4, #16]
 80029b2:	6165      	str	r5, [r4, #20]
 80029b4:	444e      	add	r6, r9
 80029b6:	eba5 0509 	sub.w	r5, r5, r9
 80029ba:	6026      	str	r6, [r4, #0]
 80029bc:	60a5      	str	r5, [r4, #8]
 80029be:	463e      	mov	r6, r7
 80029c0:	42be      	cmp	r6, r7
 80029c2:	d900      	bls.n	80029c6 <__ssputs_r+0x86>
 80029c4:	463e      	mov	r6, r7
 80029c6:	4632      	mov	r2, r6
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	4641      	mov	r1, r8
 80029cc:	f000 ff4e 	bl	800386c <memmove>
 80029d0:	68a3      	ldr	r3, [r4, #8]
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	1b9b      	subs	r3, r3, r6
 80029d6:	4432      	add	r2, r6
 80029d8:	60a3      	str	r3, [r4, #8]
 80029da:	6022      	str	r2, [r4, #0]
 80029dc:	2000      	movs	r0, #0
 80029de:	e7db      	b.n	8002998 <__ssputs_r+0x58>
 80029e0:	462a      	mov	r2, r5
 80029e2:	f001 f807 	bl	80039f4 <_realloc_r>
 80029e6:	4606      	mov	r6, r0
 80029e8:	2800      	cmp	r0, #0
 80029ea:	d1e1      	bne.n	80029b0 <__ssputs_r+0x70>
 80029ec:	6921      	ldr	r1, [r4, #16]
 80029ee:	4650      	mov	r0, sl
 80029f0:	f000 ff56 	bl	80038a0 <_free_r>
 80029f4:	e7c7      	b.n	8002986 <__ssputs_r+0x46>
	...

080029f8 <_svfiprintf_r>:
 80029f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fc:	4698      	mov	r8, r3
 80029fe:	898b      	ldrh	r3, [r1, #12]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	b09d      	sub	sp, #116	; 0x74
 8002a04:	4607      	mov	r7, r0
 8002a06:	460d      	mov	r5, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	d50e      	bpl.n	8002a2a <_svfiprintf_r+0x32>
 8002a0c:	690b      	ldr	r3, [r1, #16]
 8002a0e:	b963      	cbnz	r3, 8002a2a <_svfiprintf_r+0x32>
 8002a10:	2140      	movs	r1, #64	; 0x40
 8002a12:	f000 ff95 	bl	8003940 <_malloc_r>
 8002a16:	6028      	str	r0, [r5, #0]
 8002a18:	6128      	str	r0, [r5, #16]
 8002a1a:	b920      	cbnz	r0, 8002a26 <_svfiprintf_r+0x2e>
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	e0d1      	b.n	8002bca <_svfiprintf_r+0x1d2>
 8002a26:	2340      	movs	r3, #64	; 0x40
 8002a28:	616b      	str	r3, [r5, #20]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a2e:	2320      	movs	r3, #32
 8002a30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a38:	2330      	movs	r3, #48	; 0x30
 8002a3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002be4 <_svfiprintf_r+0x1ec>
 8002a3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a42:	f04f 0901 	mov.w	r9, #1
 8002a46:	4623      	mov	r3, r4
 8002a48:	469a      	mov	sl, r3
 8002a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a4e:	b10a      	cbz	r2, 8002a54 <_svfiprintf_r+0x5c>
 8002a50:	2a25      	cmp	r2, #37	; 0x25
 8002a52:	d1f9      	bne.n	8002a48 <_svfiprintf_r+0x50>
 8002a54:	ebba 0b04 	subs.w	fp, sl, r4
 8002a58:	d00b      	beq.n	8002a72 <_svfiprintf_r+0x7a>
 8002a5a:	465b      	mov	r3, fp
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	4629      	mov	r1, r5
 8002a60:	4638      	mov	r0, r7
 8002a62:	f7ff ff6d 	bl	8002940 <__ssputs_r>
 8002a66:	3001      	adds	r0, #1
 8002a68:	f000 80aa 	beq.w	8002bc0 <_svfiprintf_r+0x1c8>
 8002a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a6e:	445a      	add	r2, fp
 8002a70:	9209      	str	r2, [sp, #36]	; 0x24
 8002a72:	f89a 3000 	ldrb.w	r3, [sl]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80a2 	beq.w	8002bc0 <_svfiprintf_r+0x1c8>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a86:	f10a 0a01 	add.w	sl, sl, #1
 8002a8a:	9304      	str	r3, [sp, #16]
 8002a8c:	9307      	str	r3, [sp, #28]
 8002a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a92:	931a      	str	r3, [sp, #104]	; 0x68
 8002a94:	4654      	mov	r4, sl
 8002a96:	2205      	movs	r2, #5
 8002a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9c:	4851      	ldr	r0, [pc, #324]	; (8002be4 <_svfiprintf_r+0x1ec>)
 8002a9e:	f7fd fba7 	bl	80001f0 <memchr>
 8002aa2:	9a04      	ldr	r2, [sp, #16]
 8002aa4:	b9d8      	cbnz	r0, 8002ade <_svfiprintf_r+0xe6>
 8002aa6:	06d0      	lsls	r0, r2, #27
 8002aa8:	bf44      	itt	mi
 8002aaa:	2320      	movmi	r3, #32
 8002aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ab0:	0711      	lsls	r1, r2, #28
 8002ab2:	bf44      	itt	mi
 8002ab4:	232b      	movmi	r3, #43	; 0x2b
 8002ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002aba:	f89a 3000 	ldrb.w	r3, [sl]
 8002abe:	2b2a      	cmp	r3, #42	; 0x2a
 8002ac0:	d015      	beq.n	8002aee <_svfiprintf_r+0xf6>
 8002ac2:	9a07      	ldr	r2, [sp, #28]
 8002ac4:	4654      	mov	r4, sl
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f04f 0c0a 	mov.w	ip, #10
 8002acc:	4621      	mov	r1, r4
 8002ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ad2:	3b30      	subs	r3, #48	; 0x30
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	d94e      	bls.n	8002b76 <_svfiprintf_r+0x17e>
 8002ad8:	b1b0      	cbz	r0, 8002b08 <_svfiprintf_r+0x110>
 8002ada:	9207      	str	r2, [sp, #28]
 8002adc:	e014      	b.n	8002b08 <_svfiprintf_r+0x110>
 8002ade:	eba0 0308 	sub.w	r3, r0, r8
 8002ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	9304      	str	r3, [sp, #16]
 8002aea:	46a2      	mov	sl, r4
 8002aec:	e7d2      	b.n	8002a94 <_svfiprintf_r+0x9c>
 8002aee:	9b03      	ldr	r3, [sp, #12]
 8002af0:	1d19      	adds	r1, r3, #4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	9103      	str	r1, [sp, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bfbb      	ittet	lt
 8002afa:	425b      	neglt	r3, r3
 8002afc:	f042 0202 	orrlt.w	r2, r2, #2
 8002b00:	9307      	strge	r3, [sp, #28]
 8002b02:	9307      	strlt	r3, [sp, #28]
 8002b04:	bfb8      	it	lt
 8002b06:	9204      	strlt	r2, [sp, #16]
 8002b08:	7823      	ldrb	r3, [r4, #0]
 8002b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002b0c:	d10c      	bne.n	8002b28 <_svfiprintf_r+0x130>
 8002b0e:	7863      	ldrb	r3, [r4, #1]
 8002b10:	2b2a      	cmp	r3, #42	; 0x2a
 8002b12:	d135      	bne.n	8002b80 <_svfiprintf_r+0x188>
 8002b14:	9b03      	ldr	r3, [sp, #12]
 8002b16:	1d1a      	adds	r2, r3, #4
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	9203      	str	r2, [sp, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bfb8      	it	lt
 8002b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b24:	3402      	adds	r4, #2
 8002b26:	9305      	str	r3, [sp, #20]
 8002b28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002bf4 <_svfiprintf_r+0x1fc>
 8002b2c:	7821      	ldrb	r1, [r4, #0]
 8002b2e:	2203      	movs	r2, #3
 8002b30:	4650      	mov	r0, sl
 8002b32:	f7fd fb5d 	bl	80001f0 <memchr>
 8002b36:	b140      	cbz	r0, 8002b4a <_svfiprintf_r+0x152>
 8002b38:	2340      	movs	r3, #64	; 0x40
 8002b3a:	eba0 000a 	sub.w	r0, r0, sl
 8002b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8002b42:	9b04      	ldr	r3, [sp, #16]
 8002b44:	4303      	orrs	r3, r0
 8002b46:	3401      	adds	r4, #1
 8002b48:	9304      	str	r3, [sp, #16]
 8002b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b4e:	4826      	ldr	r0, [pc, #152]	; (8002be8 <_svfiprintf_r+0x1f0>)
 8002b50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b54:	2206      	movs	r2, #6
 8002b56:	f7fd fb4b 	bl	80001f0 <memchr>
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d038      	beq.n	8002bd0 <_svfiprintf_r+0x1d8>
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <_svfiprintf_r+0x1f4>)
 8002b60:	bb1b      	cbnz	r3, 8002baa <_svfiprintf_r+0x1b2>
 8002b62:	9b03      	ldr	r3, [sp, #12]
 8002b64:	3307      	adds	r3, #7
 8002b66:	f023 0307 	bic.w	r3, r3, #7
 8002b6a:	3308      	adds	r3, #8
 8002b6c:	9303      	str	r3, [sp, #12]
 8002b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b70:	4433      	add	r3, r6
 8002b72:	9309      	str	r3, [sp, #36]	; 0x24
 8002b74:	e767      	b.n	8002a46 <_svfiprintf_r+0x4e>
 8002b76:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	e7a5      	b.n	8002acc <_svfiprintf_r+0xd4>
 8002b80:	2300      	movs	r3, #0
 8002b82:	3401      	adds	r4, #1
 8002b84:	9305      	str	r3, [sp, #20]
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 0c0a 	mov.w	ip, #10
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b92:	3a30      	subs	r2, #48	; 0x30
 8002b94:	2a09      	cmp	r2, #9
 8002b96:	d903      	bls.n	8002ba0 <_svfiprintf_r+0x1a8>
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0c5      	beq.n	8002b28 <_svfiprintf_r+0x130>
 8002b9c:	9105      	str	r1, [sp, #20]
 8002b9e:	e7c3      	b.n	8002b28 <_svfiprintf_r+0x130>
 8002ba0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e7f0      	b.n	8002b8c <_svfiprintf_r+0x194>
 8002baa:	ab03      	add	r3, sp, #12
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	462a      	mov	r2, r5
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <_svfiprintf_r+0x1f8>)
 8002bb2:	a904      	add	r1, sp, #16
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	f3af 8000 	nop.w
 8002bba:	1c42      	adds	r2, r0, #1
 8002bbc:	4606      	mov	r6, r0
 8002bbe:	d1d6      	bne.n	8002b6e <_svfiprintf_r+0x176>
 8002bc0:	89ab      	ldrh	r3, [r5, #12]
 8002bc2:	065b      	lsls	r3, r3, #25
 8002bc4:	f53f af2c 	bmi.w	8002a20 <_svfiprintf_r+0x28>
 8002bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bca:	b01d      	add	sp, #116	; 0x74
 8002bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd0:	ab03      	add	r3, sp, #12
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	462a      	mov	r2, r5
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <_svfiprintf_r+0x1f8>)
 8002bd8:	a904      	add	r1, sp, #16
 8002bda:	4638      	mov	r0, r7
 8002bdc:	f000 fa4c 	bl	8003078 <_printf_i>
 8002be0:	e7eb      	b.n	8002bba <_svfiprintf_r+0x1c2>
 8002be2:	bf00      	nop
 8002be4:	08003bf1 	.word	0x08003bf1
 8002be8:	08003bfb 	.word	0x08003bfb
 8002bec:	00000000 	.word	0x00000000
 8002bf0:	08002941 	.word	0x08002941
 8002bf4:	08003bf7 	.word	0x08003bf7

08002bf8 <_sungetc_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	1c4b      	adds	r3, r1, #1
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	d103      	bne.n	8002c08 <_sungetc_r+0x10>
 8002c00:	f04f 35ff 	mov.w	r5, #4294967295
 8002c04:	4628      	mov	r0, r5
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	8993      	ldrh	r3, [r2, #12]
 8002c0a:	f023 0320 	bic.w	r3, r3, #32
 8002c0e:	8193      	strh	r3, [r2, #12]
 8002c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c12:	6852      	ldr	r2, [r2, #4]
 8002c14:	b2cd      	uxtb	r5, r1
 8002c16:	b18b      	cbz	r3, 8002c3c <_sungetc_r+0x44>
 8002c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	dd08      	ble.n	8002c30 <_sungetc_r+0x38>
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	1e5a      	subs	r2, r3, #1
 8002c22:	6022      	str	r2, [r4, #0]
 8002c24:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002c28:	6863      	ldr	r3, [r4, #4]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	e7e9      	b.n	8002c04 <_sungetc_r+0xc>
 8002c30:	4621      	mov	r1, r4
 8002c32:	f000 fdd1 	bl	80037d8 <__submore>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d0f1      	beq.n	8002c1e <_sungetc_r+0x26>
 8002c3a:	e7e1      	b.n	8002c00 <_sungetc_r+0x8>
 8002c3c:	6921      	ldr	r1, [r4, #16]
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	b151      	cbz	r1, 8002c58 <_sungetc_r+0x60>
 8002c42:	4299      	cmp	r1, r3
 8002c44:	d208      	bcs.n	8002c58 <_sungetc_r+0x60>
 8002c46:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002c4a:	42a9      	cmp	r1, r5
 8002c4c:	d104      	bne.n	8002c58 <_sungetc_r+0x60>
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	3201      	adds	r2, #1
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	6062      	str	r2, [r4, #4]
 8002c56:	e7d5      	b.n	8002c04 <_sungetc_r+0xc>
 8002c58:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c60:	6363      	str	r3, [r4, #52]	; 0x34
 8002c62:	2303      	movs	r3, #3
 8002c64:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c66:	4623      	mov	r3, r4
 8002c68:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e7dc      	b.n	8002c2c <_sungetc_r+0x34>

08002c72 <__ssrefill_r>:
 8002c72:	b510      	push	{r4, lr}
 8002c74:	460c      	mov	r4, r1
 8002c76:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002c78:	b169      	cbz	r1, 8002c96 <__ssrefill_r+0x24>
 8002c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c7e:	4299      	cmp	r1, r3
 8002c80:	d001      	beq.n	8002c86 <__ssrefill_r+0x14>
 8002c82:	f000 fe0d 	bl	80038a0 <_free_r>
 8002c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c88:	6063      	str	r3, [r4, #4]
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8002c8e:	b113      	cbz	r3, 8002c96 <__ssrefill_r+0x24>
 8002c90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c92:	6023      	str	r3, [r4, #0]
 8002c94:	bd10      	pop	{r4, pc}
 8002c96:	6923      	ldr	r3, [r4, #16]
 8002c98:	6023      	str	r3, [r4, #0]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	81a3      	strh	r3, [r4, #12]
 8002ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8002caa:	e7f3      	b.n	8002c94 <__ssrefill_r+0x22>

08002cac <__ssvfiscanf_r>:
 8002cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002cbc:	49b2      	ldr	r1, [pc, #712]	; (8002f88 <__ssvfiscanf_r+0x2dc>)
 8002cbe:	91a0      	str	r1, [sp, #640]	; 0x280
 8002cc0:	f10d 0804 	add.w	r8, sp, #4
 8002cc4:	49b1      	ldr	r1, [pc, #708]	; (8002f8c <__ssvfiscanf_r+0x2e0>)
 8002cc6:	4fb2      	ldr	r7, [pc, #712]	; (8002f90 <__ssvfiscanf_r+0x2e4>)
 8002cc8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8002f94 <__ssvfiscanf_r+0x2e8>
 8002ccc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002cd0:	4606      	mov	r6, r0
 8002cd2:	91a1      	str	r1, [sp, #644]	; 0x284
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	f892 a000 	ldrb.w	sl, [r2]
 8002cda:	f1ba 0f00 	cmp.w	sl, #0
 8002cde:	f000 8151 	beq.w	8002f84 <__ssvfiscanf_r+0x2d8>
 8002ce2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8002ce6:	f013 0308 	ands.w	r3, r3, #8
 8002cea:	f102 0501 	add.w	r5, r2, #1
 8002cee:	d019      	beq.n	8002d24 <__ssvfiscanf_r+0x78>
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	dd0f      	ble.n	8002d16 <__ssvfiscanf_r+0x6a>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	5cba      	ldrb	r2, [r7, r2]
 8002cfc:	0712      	lsls	r2, r2, #28
 8002cfe:	d401      	bmi.n	8002d04 <__ssvfiscanf_r+0x58>
 8002d00:	462a      	mov	r2, r5
 8002d02:	e7e8      	b.n	8002cd6 <__ssvfiscanf_r+0x2a>
 8002d04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002d06:	3201      	adds	r2, #1
 8002d08:	9245      	str	r2, [sp, #276]	; 0x114
 8002d0a:	6862      	ldr	r2, [r4, #4]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	3a01      	subs	r2, #1
 8002d10:	6062      	str	r2, [r4, #4]
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	e7ec      	b.n	8002cf0 <__ssvfiscanf_r+0x44>
 8002d16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	4798      	blx	r3
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d0e9      	beq.n	8002cf6 <__ssvfiscanf_r+0x4a>
 8002d22:	e7ed      	b.n	8002d00 <__ssvfiscanf_r+0x54>
 8002d24:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8002d28:	f040 8083 	bne.w	8002e32 <__ssvfiscanf_r+0x186>
 8002d2c:	9341      	str	r3, [sp, #260]	; 0x104
 8002d2e:	9343      	str	r3, [sp, #268]	; 0x10c
 8002d30:	7853      	ldrb	r3, [r2, #1]
 8002d32:	2b2a      	cmp	r3, #42	; 0x2a
 8002d34:	bf02      	ittt	eq
 8002d36:	2310      	moveq	r3, #16
 8002d38:	1c95      	addeq	r5, r2, #2
 8002d3a:	9341      	streq	r3, [sp, #260]	; 0x104
 8002d3c:	220a      	movs	r2, #10
 8002d3e:	46ab      	mov	fp, r5
 8002d40:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8002d44:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002d48:	2b09      	cmp	r3, #9
 8002d4a:	d91d      	bls.n	8002d88 <__ssvfiscanf_r+0xdc>
 8002d4c:	4891      	ldr	r0, [pc, #580]	; (8002f94 <__ssvfiscanf_r+0x2e8>)
 8002d4e:	2203      	movs	r2, #3
 8002d50:	f7fd fa4e 	bl	80001f0 <memchr>
 8002d54:	b140      	cbz	r0, 8002d68 <__ssvfiscanf_r+0xbc>
 8002d56:	2301      	movs	r3, #1
 8002d58:	eba0 0009 	sub.w	r0, r0, r9
 8002d5c:	fa03 f000 	lsl.w	r0, r3, r0
 8002d60:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002d62:	4318      	orrs	r0, r3
 8002d64:	9041      	str	r0, [sp, #260]	; 0x104
 8002d66:	465d      	mov	r5, fp
 8002d68:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d6c:	2b78      	cmp	r3, #120	; 0x78
 8002d6e:	d806      	bhi.n	8002d7e <__ssvfiscanf_r+0xd2>
 8002d70:	2b57      	cmp	r3, #87	; 0x57
 8002d72:	d810      	bhi.n	8002d96 <__ssvfiscanf_r+0xea>
 8002d74:	2b25      	cmp	r3, #37	; 0x25
 8002d76:	d05c      	beq.n	8002e32 <__ssvfiscanf_r+0x186>
 8002d78:	d856      	bhi.n	8002e28 <__ssvfiscanf_r+0x17c>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d074      	beq.n	8002e68 <__ssvfiscanf_r+0x1bc>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	9347      	str	r3, [sp, #284]	; 0x11c
 8002d82:	230a      	movs	r3, #10
 8002d84:	9342      	str	r3, [sp, #264]	; 0x108
 8002d86:	e081      	b.n	8002e8c <__ssvfiscanf_r+0x1e0>
 8002d88:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002d8a:	fb02 1303 	mla	r3, r2, r3, r1
 8002d8e:	3b30      	subs	r3, #48	; 0x30
 8002d90:	9343      	str	r3, [sp, #268]	; 0x10c
 8002d92:	465d      	mov	r5, fp
 8002d94:	e7d3      	b.n	8002d3e <__ssvfiscanf_r+0x92>
 8002d96:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002d9a:	2a20      	cmp	r2, #32
 8002d9c:	d8ef      	bhi.n	8002d7e <__ssvfiscanf_r+0xd2>
 8002d9e:	a101      	add	r1, pc, #4	; (adr r1, 8002da4 <__ssvfiscanf_r+0xf8>)
 8002da0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002da4:	08002e77 	.word	0x08002e77
 8002da8:	08002d7f 	.word	0x08002d7f
 8002dac:	08002d7f 	.word	0x08002d7f
 8002db0:	08002ed5 	.word	0x08002ed5
 8002db4:	08002d7f 	.word	0x08002d7f
 8002db8:	08002d7f 	.word	0x08002d7f
 8002dbc:	08002d7f 	.word	0x08002d7f
 8002dc0:	08002d7f 	.word	0x08002d7f
 8002dc4:	08002d7f 	.word	0x08002d7f
 8002dc8:	08002d7f 	.word	0x08002d7f
 8002dcc:	08002d7f 	.word	0x08002d7f
 8002dd0:	08002eeb 	.word	0x08002eeb
 8002dd4:	08002ec1 	.word	0x08002ec1
 8002dd8:	08002e2f 	.word	0x08002e2f
 8002ddc:	08002e2f 	.word	0x08002e2f
 8002de0:	08002e2f 	.word	0x08002e2f
 8002de4:	08002d7f 	.word	0x08002d7f
 8002de8:	08002ec5 	.word	0x08002ec5
 8002dec:	08002d7f 	.word	0x08002d7f
 8002df0:	08002d7f 	.word	0x08002d7f
 8002df4:	08002d7f 	.word	0x08002d7f
 8002df8:	08002d7f 	.word	0x08002d7f
 8002dfc:	08002efb 	.word	0x08002efb
 8002e00:	08002ecd 	.word	0x08002ecd
 8002e04:	08002e6f 	.word	0x08002e6f
 8002e08:	08002d7f 	.word	0x08002d7f
 8002e0c:	08002d7f 	.word	0x08002d7f
 8002e10:	08002ef7 	.word	0x08002ef7
 8002e14:	08002d7f 	.word	0x08002d7f
 8002e18:	08002ec1 	.word	0x08002ec1
 8002e1c:	08002d7f 	.word	0x08002d7f
 8002e20:	08002d7f 	.word	0x08002d7f
 8002e24:	08002e77 	.word	0x08002e77
 8002e28:	3b45      	subs	r3, #69	; 0x45
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d8a7      	bhi.n	8002d7e <__ssvfiscanf_r+0xd2>
 8002e2e:	2305      	movs	r3, #5
 8002e30:	e02b      	b.n	8002e8a <__ssvfiscanf_r+0x1de>
 8002e32:	6863      	ldr	r3, [r4, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	dd0d      	ble.n	8002e54 <__ssvfiscanf_r+0x1a8>
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	4552      	cmp	r2, sl
 8002e3e:	f040 80a1 	bne.w	8002f84 <__ssvfiscanf_r+0x2d8>
 8002e42:	3301      	adds	r3, #1
 8002e44:	6862      	ldr	r2, [r4, #4]
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	6062      	str	r2, [r4, #4]
 8002e50:	9345      	str	r3, [sp, #276]	; 0x114
 8002e52:	e755      	b.n	8002d00 <__ssvfiscanf_r+0x54>
 8002e54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002e56:	4621      	mov	r1, r4
 8002e58:	4630      	mov	r0, r6
 8002e5a:	4798      	blx	r3
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d0eb      	beq.n	8002e38 <__ssvfiscanf_r+0x18c>
 8002e60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8084 	bne.w	8002f70 <__ssvfiscanf_r+0x2c4>
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	e086      	b.n	8002f7c <__ssvfiscanf_r+0x2d0>
 8002e6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002e70:	f042 0220 	orr.w	r2, r2, #32
 8002e74:	9241      	str	r2, [sp, #260]	; 0x104
 8002e76:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e7c:	9241      	str	r2, [sp, #260]	; 0x104
 8002e7e:	2210      	movs	r2, #16
 8002e80:	2b6f      	cmp	r3, #111	; 0x6f
 8002e82:	9242      	str	r2, [sp, #264]	; 0x108
 8002e84:	bf34      	ite	cc
 8002e86:	2303      	movcc	r3, #3
 8002e88:	2304      	movcs	r3, #4
 8002e8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8002e8c:	6863      	ldr	r3, [r4, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dd41      	ble.n	8002f16 <__ssvfiscanf_r+0x26a>
 8002e92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002e94:	0659      	lsls	r1, r3, #25
 8002e96:	d404      	bmi.n	8002ea2 <__ssvfiscanf_r+0x1f6>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	5cba      	ldrb	r2, [r7, r2]
 8002e9e:	0712      	lsls	r2, r2, #28
 8002ea0:	d440      	bmi.n	8002f24 <__ssvfiscanf_r+0x278>
 8002ea2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	dc4f      	bgt.n	8002f48 <__ssvfiscanf_r+0x29c>
 8002ea8:	466b      	mov	r3, sp
 8002eaa:	4622      	mov	r2, r4
 8002eac:	a941      	add	r1, sp, #260	; 0x104
 8002eae:	4630      	mov	r0, r6
 8002eb0:	f000 fa08 	bl	80032c4 <_scanf_chars>
 8002eb4:	2801      	cmp	r0, #1
 8002eb6:	d065      	beq.n	8002f84 <__ssvfiscanf_r+0x2d8>
 8002eb8:	2802      	cmp	r0, #2
 8002eba:	f47f af21 	bne.w	8002d00 <__ssvfiscanf_r+0x54>
 8002ebe:	e7cf      	b.n	8002e60 <__ssvfiscanf_r+0x1b4>
 8002ec0:	220a      	movs	r2, #10
 8002ec2:	e7dd      	b.n	8002e80 <__ssvfiscanf_r+0x1d4>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9342      	str	r3, [sp, #264]	; 0x108
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e7de      	b.n	8002e8a <__ssvfiscanf_r+0x1de>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	9342      	str	r3, [sp, #264]	; 0x108
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	e7da      	b.n	8002e8a <__ssvfiscanf_r+0x1de>
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	f000 fb40 	bl	800355c <__sccl>
 8002edc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee2:	9341      	str	r3, [sp, #260]	; 0x104
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e7cf      	b.n	8002e8a <__ssvfiscanf_r+0x1de>
 8002eea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef0:	9341      	str	r3, [sp, #260]	; 0x104
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e7c9      	b.n	8002e8a <__ssvfiscanf_r+0x1de>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e7c7      	b.n	8002e8a <__ssvfiscanf_r+0x1de>
 8002efa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8002efc:	06c3      	lsls	r3, r0, #27
 8002efe:	f53f aeff 	bmi.w	8002d00 <__ssvfiscanf_r+0x54>
 8002f02:	9b00      	ldr	r3, [sp, #0]
 8002f04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002f06:	1d19      	adds	r1, r3, #4
 8002f08:	9100      	str	r1, [sp, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	07c0      	lsls	r0, r0, #31
 8002f0e:	bf4c      	ite	mi
 8002f10:	801a      	strhmi	r2, [r3, #0]
 8002f12:	601a      	strpl	r2, [r3, #0]
 8002f14:	e6f4      	b.n	8002d00 <__ssvfiscanf_r+0x54>
 8002f16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	4798      	blx	r3
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	d0b7      	beq.n	8002e92 <__ssvfiscanf_r+0x1e6>
 8002f22:	e79d      	b.n	8002e60 <__ssvfiscanf_r+0x1b4>
 8002f24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002f26:	3201      	adds	r2, #1
 8002f28:	9245      	str	r2, [sp, #276]	; 0x114
 8002f2a:	6862      	ldr	r2, [r4, #4]
 8002f2c:	3a01      	subs	r2, #1
 8002f2e:	2a00      	cmp	r2, #0
 8002f30:	6062      	str	r2, [r4, #4]
 8002f32:	dd02      	ble.n	8002f3a <__ssvfiscanf_r+0x28e>
 8002f34:	3301      	adds	r3, #1
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	e7ae      	b.n	8002e98 <__ssvfiscanf_r+0x1ec>
 8002f3a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	4630      	mov	r0, r6
 8002f40:	4798      	blx	r3
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d0a8      	beq.n	8002e98 <__ssvfiscanf_r+0x1ec>
 8002f46:	e78b      	b.n	8002e60 <__ssvfiscanf_r+0x1b4>
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	dc06      	bgt.n	8002f5a <__ssvfiscanf_r+0x2ae>
 8002f4c:	466b      	mov	r3, sp
 8002f4e:	4622      	mov	r2, r4
 8002f50:	a941      	add	r1, sp, #260	; 0x104
 8002f52:	4630      	mov	r0, r6
 8002f54:	f000 fa0e 	bl	8003374 <_scanf_i>
 8002f58:	e7ac      	b.n	8002eb4 <__ssvfiscanf_r+0x208>
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <__ssvfiscanf_r+0x2ec>)
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f43f aecf 	beq.w	8002d00 <__ssvfiscanf_r+0x54>
 8002f62:	466b      	mov	r3, sp
 8002f64:	4622      	mov	r2, r4
 8002f66:	a941      	add	r1, sp, #260	; 0x104
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f3af 8000 	nop.w
 8002f6e:	e7a1      	b.n	8002eb4 <__ssvfiscanf_r+0x208>
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f76:	bf18      	it	ne
 8002f78:	f04f 30ff 	movne.w	r0, #4294967295
 8002f7c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8002f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002f86:	e7f9      	b.n	8002f7c <__ssvfiscanf_r+0x2d0>
 8002f88:	08002bf9 	.word	0x08002bf9
 8002f8c:	08002c73 	.word	0x08002c73
 8002f90:	08003af1 	.word	0x08003af1
 8002f94:	08003bf7 	.word	0x08003bf7
 8002f98:	00000000 	.word	0x00000000

08002f9c <_printf_common>:
 8002f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	4616      	mov	r6, r2
 8002fa2:	4699      	mov	r9, r3
 8002fa4:	688a      	ldr	r2, [r1, #8]
 8002fa6:	690b      	ldr	r3, [r1, #16]
 8002fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fac:	4293      	cmp	r3, r2
 8002fae:	bfb8      	it	lt
 8002fb0:	4613      	movlt	r3, r2
 8002fb2:	6033      	str	r3, [r6, #0]
 8002fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fb8:	4607      	mov	r7, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	b10a      	cbz	r2, 8002fc2 <_printf_common+0x26>
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	6033      	str	r3, [r6, #0]
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	0699      	lsls	r1, r3, #26
 8002fc6:	bf42      	ittt	mi
 8002fc8:	6833      	ldrmi	r3, [r6, #0]
 8002fca:	3302      	addmi	r3, #2
 8002fcc:	6033      	strmi	r3, [r6, #0]
 8002fce:	6825      	ldr	r5, [r4, #0]
 8002fd0:	f015 0506 	ands.w	r5, r5, #6
 8002fd4:	d106      	bne.n	8002fe4 <_printf_common+0x48>
 8002fd6:	f104 0a19 	add.w	sl, r4, #25
 8002fda:	68e3      	ldr	r3, [r4, #12]
 8002fdc:	6832      	ldr	r2, [r6, #0]
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	42ab      	cmp	r3, r5
 8002fe2:	dc26      	bgt.n	8003032 <_printf_common+0x96>
 8002fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fe8:	1e13      	subs	r3, r2, #0
 8002fea:	6822      	ldr	r2, [r4, #0]
 8002fec:	bf18      	it	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	0692      	lsls	r2, r2, #26
 8002ff2:	d42b      	bmi.n	800304c <_printf_common+0xb0>
 8002ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d01e      	beq.n	8003040 <_printf_common+0xa4>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	68e5      	ldr	r5, [r4, #12]
 8003006:	6832      	ldr	r2, [r6, #0]
 8003008:	f003 0306 	and.w	r3, r3, #6
 800300c:	2b04      	cmp	r3, #4
 800300e:	bf08      	it	eq
 8003010:	1aad      	subeq	r5, r5, r2
 8003012:	68a3      	ldr	r3, [r4, #8]
 8003014:	6922      	ldr	r2, [r4, #16]
 8003016:	bf0c      	ite	eq
 8003018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800301c:	2500      	movne	r5, #0
 800301e:	4293      	cmp	r3, r2
 8003020:	bfc4      	itt	gt
 8003022:	1a9b      	subgt	r3, r3, r2
 8003024:	18ed      	addgt	r5, r5, r3
 8003026:	2600      	movs	r6, #0
 8003028:	341a      	adds	r4, #26
 800302a:	42b5      	cmp	r5, r6
 800302c:	d11a      	bne.n	8003064 <_printf_common+0xc8>
 800302e:	2000      	movs	r0, #0
 8003030:	e008      	b.n	8003044 <_printf_common+0xa8>
 8003032:	2301      	movs	r3, #1
 8003034:	4652      	mov	r2, sl
 8003036:	4649      	mov	r1, r9
 8003038:	4638      	mov	r0, r7
 800303a:	47c0      	blx	r8
 800303c:	3001      	adds	r0, #1
 800303e:	d103      	bne.n	8003048 <_printf_common+0xac>
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003048:	3501      	adds	r5, #1
 800304a:	e7c6      	b.n	8002fda <_printf_common+0x3e>
 800304c:	18e1      	adds	r1, r4, r3
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	2030      	movs	r0, #48	; 0x30
 8003052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003056:	4422      	add	r2, r4
 8003058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800305c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003060:	3302      	adds	r3, #2
 8003062:	e7c7      	b.n	8002ff4 <_printf_common+0x58>
 8003064:	2301      	movs	r3, #1
 8003066:	4622      	mov	r2, r4
 8003068:	4649      	mov	r1, r9
 800306a:	4638      	mov	r0, r7
 800306c:	47c0      	blx	r8
 800306e:	3001      	adds	r0, #1
 8003070:	d0e6      	beq.n	8003040 <_printf_common+0xa4>
 8003072:	3601      	adds	r6, #1
 8003074:	e7d9      	b.n	800302a <_printf_common+0x8e>
	...

08003078 <_printf_i>:
 8003078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	460c      	mov	r4, r1
 800307e:	4691      	mov	r9, r2
 8003080:	7e27      	ldrb	r7, [r4, #24]
 8003082:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003084:	2f78      	cmp	r7, #120	; 0x78
 8003086:	4680      	mov	r8, r0
 8003088:	469a      	mov	sl, r3
 800308a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800308e:	d807      	bhi.n	80030a0 <_printf_i+0x28>
 8003090:	2f62      	cmp	r7, #98	; 0x62
 8003092:	d80a      	bhi.n	80030aa <_printf_i+0x32>
 8003094:	2f00      	cmp	r7, #0
 8003096:	f000 80d8 	beq.w	800324a <_printf_i+0x1d2>
 800309a:	2f58      	cmp	r7, #88	; 0x58
 800309c:	f000 80a3 	beq.w	80031e6 <_printf_i+0x16e>
 80030a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030a8:	e03a      	b.n	8003120 <_printf_i+0xa8>
 80030aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030ae:	2b15      	cmp	r3, #21
 80030b0:	d8f6      	bhi.n	80030a0 <_printf_i+0x28>
 80030b2:	a001      	add	r0, pc, #4	; (adr r0, 80030b8 <_printf_i+0x40>)
 80030b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003125 	.word	0x08003125
 80030c0:	080030a1 	.word	0x080030a1
 80030c4:	080030a1 	.word	0x080030a1
 80030c8:	080030a1 	.word	0x080030a1
 80030cc:	080030a1 	.word	0x080030a1
 80030d0:	08003125 	.word	0x08003125
 80030d4:	080030a1 	.word	0x080030a1
 80030d8:	080030a1 	.word	0x080030a1
 80030dc:	080030a1 	.word	0x080030a1
 80030e0:	080030a1 	.word	0x080030a1
 80030e4:	08003231 	.word	0x08003231
 80030e8:	08003155 	.word	0x08003155
 80030ec:	08003213 	.word	0x08003213
 80030f0:	080030a1 	.word	0x080030a1
 80030f4:	080030a1 	.word	0x080030a1
 80030f8:	08003253 	.word	0x08003253
 80030fc:	080030a1 	.word	0x080030a1
 8003100:	08003155 	.word	0x08003155
 8003104:	080030a1 	.word	0x080030a1
 8003108:	080030a1 	.word	0x080030a1
 800310c:	0800321b 	.word	0x0800321b
 8003110:	680b      	ldr	r3, [r1, #0]
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	600a      	str	r2, [r1, #0]
 8003118:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800311c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003120:	2301      	movs	r3, #1
 8003122:	e0a3      	b.n	800326c <_printf_i+0x1f4>
 8003124:	6825      	ldr	r5, [r4, #0]
 8003126:	6808      	ldr	r0, [r1, #0]
 8003128:	062e      	lsls	r6, r5, #24
 800312a:	f100 0304 	add.w	r3, r0, #4
 800312e:	d50a      	bpl.n	8003146 <_printf_i+0xce>
 8003130:	6805      	ldr	r5, [r0, #0]
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	2d00      	cmp	r5, #0
 8003136:	da03      	bge.n	8003140 <_printf_i+0xc8>
 8003138:	232d      	movs	r3, #45	; 0x2d
 800313a:	426d      	negs	r5, r5
 800313c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003140:	485e      	ldr	r0, [pc, #376]	; (80032bc <_printf_i+0x244>)
 8003142:	230a      	movs	r3, #10
 8003144:	e019      	b.n	800317a <_printf_i+0x102>
 8003146:	f015 0f40 	tst.w	r5, #64	; 0x40
 800314a:	6805      	ldr	r5, [r0, #0]
 800314c:	600b      	str	r3, [r1, #0]
 800314e:	bf18      	it	ne
 8003150:	b22d      	sxthne	r5, r5
 8003152:	e7ef      	b.n	8003134 <_printf_i+0xbc>
 8003154:	680b      	ldr	r3, [r1, #0]
 8003156:	6825      	ldr	r5, [r4, #0]
 8003158:	1d18      	adds	r0, r3, #4
 800315a:	6008      	str	r0, [r1, #0]
 800315c:	0628      	lsls	r0, r5, #24
 800315e:	d501      	bpl.n	8003164 <_printf_i+0xec>
 8003160:	681d      	ldr	r5, [r3, #0]
 8003162:	e002      	b.n	800316a <_printf_i+0xf2>
 8003164:	0669      	lsls	r1, r5, #25
 8003166:	d5fb      	bpl.n	8003160 <_printf_i+0xe8>
 8003168:	881d      	ldrh	r5, [r3, #0]
 800316a:	4854      	ldr	r0, [pc, #336]	; (80032bc <_printf_i+0x244>)
 800316c:	2f6f      	cmp	r7, #111	; 0x6f
 800316e:	bf0c      	ite	eq
 8003170:	2308      	moveq	r3, #8
 8003172:	230a      	movne	r3, #10
 8003174:	2100      	movs	r1, #0
 8003176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800317a:	6866      	ldr	r6, [r4, #4]
 800317c:	60a6      	str	r6, [r4, #8]
 800317e:	2e00      	cmp	r6, #0
 8003180:	bfa2      	ittt	ge
 8003182:	6821      	ldrge	r1, [r4, #0]
 8003184:	f021 0104 	bicge.w	r1, r1, #4
 8003188:	6021      	strge	r1, [r4, #0]
 800318a:	b90d      	cbnz	r5, 8003190 <_printf_i+0x118>
 800318c:	2e00      	cmp	r6, #0
 800318e:	d04d      	beq.n	800322c <_printf_i+0x1b4>
 8003190:	4616      	mov	r6, r2
 8003192:	fbb5 f1f3 	udiv	r1, r5, r3
 8003196:	fb03 5711 	mls	r7, r3, r1, r5
 800319a:	5dc7      	ldrb	r7, [r0, r7]
 800319c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031a0:	462f      	mov	r7, r5
 80031a2:	42bb      	cmp	r3, r7
 80031a4:	460d      	mov	r5, r1
 80031a6:	d9f4      	bls.n	8003192 <_printf_i+0x11a>
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d10b      	bne.n	80031c4 <_printf_i+0x14c>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	07df      	lsls	r7, r3, #31
 80031b0:	d508      	bpl.n	80031c4 <_printf_i+0x14c>
 80031b2:	6923      	ldr	r3, [r4, #16]
 80031b4:	6861      	ldr	r1, [r4, #4]
 80031b6:	4299      	cmp	r1, r3
 80031b8:	bfde      	ittt	le
 80031ba:	2330      	movle	r3, #48	; 0x30
 80031bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031c4:	1b92      	subs	r2, r2, r6
 80031c6:	6122      	str	r2, [r4, #16]
 80031c8:	f8cd a000 	str.w	sl, [sp]
 80031cc:	464b      	mov	r3, r9
 80031ce:	aa03      	add	r2, sp, #12
 80031d0:	4621      	mov	r1, r4
 80031d2:	4640      	mov	r0, r8
 80031d4:	f7ff fee2 	bl	8002f9c <_printf_common>
 80031d8:	3001      	adds	r0, #1
 80031da:	d14c      	bne.n	8003276 <_printf_i+0x1fe>
 80031dc:	f04f 30ff 	mov.w	r0, #4294967295
 80031e0:	b004      	add	sp, #16
 80031e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e6:	4835      	ldr	r0, [pc, #212]	; (80032bc <_printf_i+0x244>)
 80031e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	680e      	ldr	r6, [r1, #0]
 80031f0:	061f      	lsls	r7, r3, #24
 80031f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80031f6:	600e      	str	r6, [r1, #0]
 80031f8:	d514      	bpl.n	8003224 <_printf_i+0x1ac>
 80031fa:	07d9      	lsls	r1, r3, #31
 80031fc:	bf44      	itt	mi
 80031fe:	f043 0320 	orrmi.w	r3, r3, #32
 8003202:	6023      	strmi	r3, [r4, #0]
 8003204:	b91d      	cbnz	r5, 800320e <_printf_i+0x196>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	f023 0320 	bic.w	r3, r3, #32
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	2310      	movs	r3, #16
 8003210:	e7b0      	b.n	8003174 <_printf_i+0xfc>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	f043 0320 	orr.w	r3, r3, #32
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	2378      	movs	r3, #120	; 0x78
 800321c:	4828      	ldr	r0, [pc, #160]	; (80032c0 <_printf_i+0x248>)
 800321e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003222:	e7e3      	b.n	80031ec <_printf_i+0x174>
 8003224:	065e      	lsls	r6, r3, #25
 8003226:	bf48      	it	mi
 8003228:	b2ad      	uxthmi	r5, r5
 800322a:	e7e6      	b.n	80031fa <_printf_i+0x182>
 800322c:	4616      	mov	r6, r2
 800322e:	e7bb      	b.n	80031a8 <_printf_i+0x130>
 8003230:	680b      	ldr	r3, [r1, #0]
 8003232:	6826      	ldr	r6, [r4, #0]
 8003234:	6960      	ldr	r0, [r4, #20]
 8003236:	1d1d      	adds	r5, r3, #4
 8003238:	600d      	str	r5, [r1, #0]
 800323a:	0635      	lsls	r5, r6, #24
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	d501      	bpl.n	8003244 <_printf_i+0x1cc>
 8003240:	6018      	str	r0, [r3, #0]
 8003242:	e002      	b.n	800324a <_printf_i+0x1d2>
 8003244:	0671      	lsls	r1, r6, #25
 8003246:	d5fb      	bpl.n	8003240 <_printf_i+0x1c8>
 8003248:	8018      	strh	r0, [r3, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	6123      	str	r3, [r4, #16]
 800324e:	4616      	mov	r6, r2
 8003250:	e7ba      	b.n	80031c8 <_printf_i+0x150>
 8003252:	680b      	ldr	r3, [r1, #0]
 8003254:	1d1a      	adds	r2, r3, #4
 8003256:	600a      	str	r2, [r1, #0]
 8003258:	681e      	ldr	r6, [r3, #0]
 800325a:	6862      	ldr	r2, [r4, #4]
 800325c:	2100      	movs	r1, #0
 800325e:	4630      	mov	r0, r6
 8003260:	f7fc ffc6 	bl	80001f0 <memchr>
 8003264:	b108      	cbz	r0, 800326a <_printf_i+0x1f2>
 8003266:	1b80      	subs	r0, r0, r6
 8003268:	6060      	str	r0, [r4, #4]
 800326a:	6863      	ldr	r3, [r4, #4]
 800326c:	6123      	str	r3, [r4, #16]
 800326e:	2300      	movs	r3, #0
 8003270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003274:	e7a8      	b.n	80031c8 <_printf_i+0x150>
 8003276:	6923      	ldr	r3, [r4, #16]
 8003278:	4632      	mov	r2, r6
 800327a:	4649      	mov	r1, r9
 800327c:	4640      	mov	r0, r8
 800327e:	47d0      	blx	sl
 8003280:	3001      	adds	r0, #1
 8003282:	d0ab      	beq.n	80031dc <_printf_i+0x164>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	079b      	lsls	r3, r3, #30
 8003288:	d413      	bmi.n	80032b2 <_printf_i+0x23a>
 800328a:	68e0      	ldr	r0, [r4, #12]
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	4298      	cmp	r0, r3
 8003290:	bfb8      	it	lt
 8003292:	4618      	movlt	r0, r3
 8003294:	e7a4      	b.n	80031e0 <_printf_i+0x168>
 8003296:	2301      	movs	r3, #1
 8003298:	4632      	mov	r2, r6
 800329a:	4649      	mov	r1, r9
 800329c:	4640      	mov	r0, r8
 800329e:	47d0      	blx	sl
 80032a0:	3001      	adds	r0, #1
 80032a2:	d09b      	beq.n	80031dc <_printf_i+0x164>
 80032a4:	3501      	adds	r5, #1
 80032a6:	68e3      	ldr	r3, [r4, #12]
 80032a8:	9903      	ldr	r1, [sp, #12]
 80032aa:	1a5b      	subs	r3, r3, r1
 80032ac:	42ab      	cmp	r3, r5
 80032ae:	dcf2      	bgt.n	8003296 <_printf_i+0x21e>
 80032b0:	e7eb      	b.n	800328a <_printf_i+0x212>
 80032b2:	2500      	movs	r5, #0
 80032b4:	f104 0619 	add.w	r6, r4, #25
 80032b8:	e7f5      	b.n	80032a6 <_printf_i+0x22e>
 80032ba:	bf00      	nop
 80032bc:	08003c02 	.word	0x08003c02
 80032c0:	08003c13 	.word	0x08003c13

080032c4 <_scanf_chars>:
 80032c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c8:	4615      	mov	r5, r2
 80032ca:	688a      	ldr	r2, [r1, #8]
 80032cc:	4680      	mov	r8, r0
 80032ce:	460c      	mov	r4, r1
 80032d0:	b932      	cbnz	r2, 80032e0 <_scanf_chars+0x1c>
 80032d2:	698a      	ldr	r2, [r1, #24]
 80032d4:	2a00      	cmp	r2, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2201      	moveq	r2, #1
 80032da:	f04f 32ff 	movne.w	r2, #4294967295
 80032de:	608a      	str	r2, [r1, #8]
 80032e0:	6822      	ldr	r2, [r4, #0]
 80032e2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003370 <_scanf_chars+0xac>
 80032e6:	06d1      	lsls	r1, r2, #27
 80032e8:	bf5f      	itttt	pl
 80032ea:	681a      	ldrpl	r2, [r3, #0]
 80032ec:	1d11      	addpl	r1, r2, #4
 80032ee:	6019      	strpl	r1, [r3, #0]
 80032f0:	6816      	ldrpl	r6, [r2, #0]
 80032f2:	2700      	movs	r7, #0
 80032f4:	69a0      	ldr	r0, [r4, #24]
 80032f6:	b188      	cbz	r0, 800331c <_scanf_chars+0x58>
 80032f8:	2801      	cmp	r0, #1
 80032fa:	d107      	bne.n	800330c <_scanf_chars+0x48>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	781a      	ldrb	r2, [r3, #0]
 8003300:	6963      	ldr	r3, [r4, #20]
 8003302:	5c9b      	ldrb	r3, [r3, r2]
 8003304:	b953      	cbnz	r3, 800331c <_scanf_chars+0x58>
 8003306:	bb27      	cbnz	r7, 8003352 <_scanf_chars+0x8e>
 8003308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800330c:	2802      	cmp	r0, #2
 800330e:	d120      	bne.n	8003352 <_scanf_chars+0x8e>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003318:	071b      	lsls	r3, r3, #28
 800331a:	d41a      	bmi.n	8003352 <_scanf_chars+0x8e>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	06da      	lsls	r2, r3, #27
 8003320:	bf5e      	ittt	pl
 8003322:	682b      	ldrpl	r3, [r5, #0]
 8003324:	781b      	ldrbpl	r3, [r3, #0]
 8003326:	f806 3b01 	strbpl.w	r3, [r6], #1
 800332a:	682a      	ldr	r2, [r5, #0]
 800332c:	686b      	ldr	r3, [r5, #4]
 800332e:	3201      	adds	r2, #1
 8003330:	602a      	str	r2, [r5, #0]
 8003332:	68a2      	ldr	r2, [r4, #8]
 8003334:	3b01      	subs	r3, #1
 8003336:	3a01      	subs	r2, #1
 8003338:	606b      	str	r3, [r5, #4]
 800333a:	3701      	adds	r7, #1
 800333c:	60a2      	str	r2, [r4, #8]
 800333e:	b142      	cbz	r2, 8003352 <_scanf_chars+0x8e>
 8003340:	2b00      	cmp	r3, #0
 8003342:	dcd7      	bgt.n	80032f4 <_scanf_chars+0x30>
 8003344:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003348:	4629      	mov	r1, r5
 800334a:	4640      	mov	r0, r8
 800334c:	4798      	blx	r3
 800334e:	2800      	cmp	r0, #0
 8003350:	d0d0      	beq.n	80032f4 <_scanf_chars+0x30>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f013 0310 	ands.w	r3, r3, #16
 8003358:	d105      	bne.n	8003366 <_scanf_chars+0xa2>
 800335a:	68e2      	ldr	r2, [r4, #12]
 800335c:	3201      	adds	r2, #1
 800335e:	60e2      	str	r2, [r4, #12]
 8003360:	69a2      	ldr	r2, [r4, #24]
 8003362:	b102      	cbz	r2, 8003366 <_scanf_chars+0xa2>
 8003364:	7033      	strb	r3, [r6, #0]
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	441f      	add	r7, r3
 800336a:	6127      	str	r7, [r4, #16]
 800336c:	2000      	movs	r0, #0
 800336e:	e7cb      	b.n	8003308 <_scanf_chars+0x44>
 8003370:	08003af1 	.word	0x08003af1

08003374 <_scanf_i>:
 8003374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003378:	4698      	mov	r8, r3
 800337a:	4b74      	ldr	r3, [pc, #464]	; (800354c <_scanf_i+0x1d8>)
 800337c:	460c      	mov	r4, r1
 800337e:	4682      	mov	sl, r0
 8003380:	4616      	mov	r6, r2
 8003382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003386:	b087      	sub	sp, #28
 8003388:	ab03      	add	r3, sp, #12
 800338a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800338e:	4b70      	ldr	r3, [pc, #448]	; (8003550 <_scanf_i+0x1dc>)
 8003390:	69a1      	ldr	r1, [r4, #24]
 8003392:	4a70      	ldr	r2, [pc, #448]	; (8003554 <_scanf_i+0x1e0>)
 8003394:	2903      	cmp	r1, #3
 8003396:	bf18      	it	ne
 8003398:	461a      	movne	r2, r3
 800339a:	68a3      	ldr	r3, [r4, #8]
 800339c:	9201      	str	r2, [sp, #4]
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80033a4:	bf88      	it	hi
 80033a6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80033aa:	4627      	mov	r7, r4
 80033ac:	bf82      	ittt	hi
 80033ae:	eb03 0905 	addhi.w	r9, r3, r5
 80033b2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80033b6:	60a3      	strhi	r3, [r4, #8]
 80033b8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80033bc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80033c0:	bf98      	it	ls
 80033c2:	f04f 0900 	movls.w	r9, #0
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	463d      	mov	r5, r7
 80033ca:	f04f 0b00 	mov.w	fp, #0
 80033ce:	6831      	ldr	r1, [r6, #0]
 80033d0:	ab03      	add	r3, sp, #12
 80033d2:	7809      	ldrb	r1, [r1, #0]
 80033d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80033d8:	2202      	movs	r2, #2
 80033da:	f7fc ff09 	bl	80001f0 <memchr>
 80033de:	b328      	cbz	r0, 800342c <_scanf_i+0xb8>
 80033e0:	f1bb 0f01 	cmp.w	fp, #1
 80033e4:	d159      	bne.n	800349a <_scanf_i+0x126>
 80033e6:	6862      	ldr	r2, [r4, #4]
 80033e8:	b92a      	cbnz	r2, 80033f6 <_scanf_i+0x82>
 80033ea:	6822      	ldr	r2, [r4, #0]
 80033ec:	2308      	movs	r3, #8
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	6063      	str	r3, [r4, #4]
 80033f4:	6022      	str	r2, [r4, #0]
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80033fc:	6022      	str	r2, [r4, #0]
 80033fe:	68a2      	ldr	r2, [r4, #8]
 8003400:	1e51      	subs	r1, r2, #1
 8003402:	60a1      	str	r1, [r4, #8]
 8003404:	b192      	cbz	r2, 800342c <_scanf_i+0xb8>
 8003406:	6832      	ldr	r2, [r6, #0]
 8003408:	1c51      	adds	r1, r2, #1
 800340a:	6031      	str	r1, [r6, #0]
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	f805 2b01 	strb.w	r2, [r5], #1
 8003412:	6872      	ldr	r2, [r6, #4]
 8003414:	3a01      	subs	r2, #1
 8003416:	2a00      	cmp	r2, #0
 8003418:	6072      	str	r2, [r6, #4]
 800341a:	dc07      	bgt.n	800342c <_scanf_i+0xb8>
 800341c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003420:	4631      	mov	r1, r6
 8003422:	4650      	mov	r0, sl
 8003424:	4790      	blx	r2
 8003426:	2800      	cmp	r0, #0
 8003428:	f040 8085 	bne.w	8003536 <_scanf_i+0x1c2>
 800342c:	f10b 0b01 	add.w	fp, fp, #1
 8003430:	f1bb 0f03 	cmp.w	fp, #3
 8003434:	d1cb      	bne.n	80033ce <_scanf_i+0x5a>
 8003436:	6863      	ldr	r3, [r4, #4]
 8003438:	b90b      	cbnz	r3, 800343e <_scanf_i+0xca>
 800343a:	230a      	movs	r3, #10
 800343c:	6063      	str	r3, [r4, #4]
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	4945      	ldr	r1, [pc, #276]	; (8003558 <_scanf_i+0x1e4>)
 8003442:	6960      	ldr	r0, [r4, #20]
 8003444:	1ac9      	subs	r1, r1, r3
 8003446:	f000 f889 	bl	800355c <__sccl>
 800344a:	f04f 0b00 	mov.w	fp, #0
 800344e:	68a3      	ldr	r3, [r4, #8]
 8003450:	6822      	ldr	r2, [r4, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03d      	beq.n	80034d2 <_scanf_i+0x15e>
 8003456:	6831      	ldr	r1, [r6, #0]
 8003458:	6960      	ldr	r0, [r4, #20]
 800345a:	f891 c000 	ldrb.w	ip, [r1]
 800345e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003462:	2800      	cmp	r0, #0
 8003464:	d035      	beq.n	80034d2 <_scanf_i+0x15e>
 8003466:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800346a:	d124      	bne.n	80034b6 <_scanf_i+0x142>
 800346c:	0510      	lsls	r0, r2, #20
 800346e:	d522      	bpl.n	80034b6 <_scanf_i+0x142>
 8003470:	f10b 0b01 	add.w	fp, fp, #1
 8003474:	f1b9 0f00 	cmp.w	r9, #0
 8003478:	d003      	beq.n	8003482 <_scanf_i+0x10e>
 800347a:	3301      	adds	r3, #1
 800347c:	f109 39ff 	add.w	r9, r9, #4294967295
 8003480:	60a3      	str	r3, [r4, #8]
 8003482:	6873      	ldr	r3, [r6, #4]
 8003484:	3b01      	subs	r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	6073      	str	r3, [r6, #4]
 800348a:	dd1b      	ble.n	80034c4 <_scanf_i+0x150>
 800348c:	6833      	ldr	r3, [r6, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	6033      	str	r3, [r6, #0]
 8003492:	68a3      	ldr	r3, [r4, #8]
 8003494:	3b01      	subs	r3, #1
 8003496:	60a3      	str	r3, [r4, #8]
 8003498:	e7d9      	b.n	800344e <_scanf_i+0xda>
 800349a:	f1bb 0f02 	cmp.w	fp, #2
 800349e:	d1ae      	bne.n	80033fe <_scanf_i+0x8a>
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80034a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80034aa:	d1bf      	bne.n	800342c <_scanf_i+0xb8>
 80034ac:	2310      	movs	r3, #16
 80034ae:	6063      	str	r3, [r4, #4]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b4:	e7a2      	b.n	80033fc <_scanf_i+0x88>
 80034b6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80034ba:	6022      	str	r2, [r4, #0]
 80034bc:	780b      	ldrb	r3, [r1, #0]
 80034be:	f805 3b01 	strb.w	r3, [r5], #1
 80034c2:	e7de      	b.n	8003482 <_scanf_i+0x10e>
 80034c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80034c8:	4631      	mov	r1, r6
 80034ca:	4650      	mov	r0, sl
 80034cc:	4798      	blx	r3
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0df      	beq.n	8003492 <_scanf_i+0x11e>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	05d9      	lsls	r1, r3, #23
 80034d6:	d50d      	bpl.n	80034f4 <_scanf_i+0x180>
 80034d8:	42bd      	cmp	r5, r7
 80034da:	d909      	bls.n	80034f0 <_scanf_i+0x17c>
 80034dc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80034e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034e4:	4632      	mov	r2, r6
 80034e6:	4650      	mov	r0, sl
 80034e8:	4798      	blx	r3
 80034ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80034ee:	464d      	mov	r5, r9
 80034f0:	42bd      	cmp	r5, r7
 80034f2:	d028      	beq.n	8003546 <_scanf_i+0x1d2>
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	f012 0210 	ands.w	r2, r2, #16
 80034fa:	d113      	bne.n	8003524 <_scanf_i+0x1b0>
 80034fc:	702a      	strb	r2, [r5, #0]
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	9e01      	ldr	r6, [sp, #4]
 8003502:	4639      	mov	r1, r7
 8003504:	4650      	mov	r0, sl
 8003506:	47b0      	blx	r6
 8003508:	f8d8 3000 	ldr.w	r3, [r8]
 800350c:	6821      	ldr	r1, [r4, #0]
 800350e:	1d1a      	adds	r2, r3, #4
 8003510:	f8c8 2000 	str.w	r2, [r8]
 8003514:	f011 0f20 	tst.w	r1, #32
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	d00f      	beq.n	800353c <_scanf_i+0x1c8>
 800351c:	6018      	str	r0, [r3, #0]
 800351e:	68e3      	ldr	r3, [r4, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60e3      	str	r3, [r4, #12]
 8003524:	1bed      	subs	r5, r5, r7
 8003526:	44ab      	add	fp, r5
 8003528:	6925      	ldr	r5, [r4, #16]
 800352a:	445d      	add	r5, fp
 800352c:	6125      	str	r5, [r4, #16]
 800352e:	2000      	movs	r0, #0
 8003530:	b007      	add	sp, #28
 8003532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003536:	f04f 0b00 	mov.w	fp, #0
 800353a:	e7ca      	b.n	80034d2 <_scanf_i+0x15e>
 800353c:	07ca      	lsls	r2, r1, #31
 800353e:	bf4c      	ite	mi
 8003540:	8018      	strhmi	r0, [r3, #0]
 8003542:	6018      	strpl	r0, [r3, #0]
 8003544:	e7eb      	b.n	800351e <_scanf_i+0x1aa>
 8003546:	2001      	movs	r0, #1
 8003548:	e7f2      	b.n	8003530 <_scanf_i+0x1bc>
 800354a:	bf00      	nop
 800354c:	08003acc 	.word	0x08003acc
 8003550:	080037d5 	.word	0x080037d5
 8003554:	080036d9 	.word	0x080036d9
 8003558:	08003c3d 	.word	0x08003c3d

0800355c <__sccl>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	780b      	ldrb	r3, [r1, #0]
 8003560:	4604      	mov	r4, r0
 8003562:	2b5e      	cmp	r3, #94	; 0x5e
 8003564:	bf0b      	itete	eq
 8003566:	784b      	ldrbeq	r3, [r1, #1]
 8003568:	1c48      	addne	r0, r1, #1
 800356a:	1c88      	addeq	r0, r1, #2
 800356c:	2200      	movne	r2, #0
 800356e:	bf08      	it	eq
 8003570:	2201      	moveq	r2, #1
 8003572:	1e61      	subs	r1, r4, #1
 8003574:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003578:	f801 2f01 	strb.w	r2, [r1, #1]!
 800357c:	42a9      	cmp	r1, r5
 800357e:	d1fb      	bne.n	8003578 <__sccl+0x1c>
 8003580:	b90b      	cbnz	r3, 8003586 <__sccl+0x2a>
 8003582:	3801      	subs	r0, #1
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	f082 0101 	eor.w	r1, r2, #1
 800358a:	54e1      	strb	r1, [r4, r3]
 800358c:	1c42      	adds	r2, r0, #1
 800358e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8003592:	2d2d      	cmp	r5, #45	; 0x2d
 8003594:	f102 36ff 	add.w	r6, r2, #4294967295
 8003598:	4610      	mov	r0, r2
 800359a:	d006      	beq.n	80035aa <__sccl+0x4e>
 800359c:	2d5d      	cmp	r5, #93	; 0x5d
 800359e:	d0f1      	beq.n	8003584 <__sccl+0x28>
 80035a0:	b90d      	cbnz	r5, 80035a6 <__sccl+0x4a>
 80035a2:	4630      	mov	r0, r6
 80035a4:	e7ee      	b.n	8003584 <__sccl+0x28>
 80035a6:	462b      	mov	r3, r5
 80035a8:	e7ef      	b.n	800358a <__sccl+0x2e>
 80035aa:	7816      	ldrb	r6, [r2, #0]
 80035ac:	2e5d      	cmp	r6, #93	; 0x5d
 80035ae:	d0fa      	beq.n	80035a6 <__sccl+0x4a>
 80035b0:	42b3      	cmp	r3, r6
 80035b2:	dcf8      	bgt.n	80035a6 <__sccl+0x4a>
 80035b4:	4618      	mov	r0, r3
 80035b6:	3001      	adds	r0, #1
 80035b8:	4286      	cmp	r6, r0
 80035ba:	5421      	strb	r1, [r4, r0]
 80035bc:	dcfb      	bgt.n	80035b6 <__sccl+0x5a>
 80035be:	43d8      	mvns	r0, r3
 80035c0:	4430      	add	r0, r6
 80035c2:	1c5d      	adds	r5, r3, #1
 80035c4:	42b3      	cmp	r3, r6
 80035c6:	bfa8      	it	ge
 80035c8:	2000      	movge	r0, #0
 80035ca:	182b      	adds	r3, r5, r0
 80035cc:	3202      	adds	r2, #2
 80035ce:	e7de      	b.n	800358e <__sccl+0x32>

080035d0 <_strtol_l.isra.0>:
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d6:	d001      	beq.n	80035dc <_strtol_l.isra.0+0xc>
 80035d8:	2b24      	cmp	r3, #36	; 0x24
 80035da:	d906      	bls.n	80035ea <_strtol_l.isra.0+0x1a>
 80035dc:	f7ff f91e 	bl	800281c <__errno>
 80035e0:	2316      	movs	r3, #22
 80035e2:	6003      	str	r3, [r0, #0]
 80035e4:	2000      	movs	r0, #0
 80035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ea:	4f3a      	ldr	r7, [pc, #232]	; (80036d4 <_strtol_l.isra.0+0x104>)
 80035ec:	468e      	mov	lr, r1
 80035ee:	4676      	mov	r6, lr
 80035f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80035f4:	5de5      	ldrb	r5, [r4, r7]
 80035f6:	f015 0508 	ands.w	r5, r5, #8
 80035fa:	d1f8      	bne.n	80035ee <_strtol_l.isra.0+0x1e>
 80035fc:	2c2d      	cmp	r4, #45	; 0x2d
 80035fe:	d134      	bne.n	800366a <_strtol_l.isra.0+0x9a>
 8003600:	f89e 4000 	ldrb.w	r4, [lr]
 8003604:	f04f 0801 	mov.w	r8, #1
 8003608:	f106 0e02 	add.w	lr, r6, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d05c      	beq.n	80036ca <_strtol_l.isra.0+0xfa>
 8003610:	2b10      	cmp	r3, #16
 8003612:	d10c      	bne.n	800362e <_strtol_l.isra.0+0x5e>
 8003614:	2c30      	cmp	r4, #48	; 0x30
 8003616:	d10a      	bne.n	800362e <_strtol_l.isra.0+0x5e>
 8003618:	f89e 4000 	ldrb.w	r4, [lr]
 800361c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003620:	2c58      	cmp	r4, #88	; 0x58
 8003622:	d14d      	bne.n	80036c0 <_strtol_l.isra.0+0xf0>
 8003624:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003628:	2310      	movs	r3, #16
 800362a:	f10e 0e02 	add.w	lr, lr, #2
 800362e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003632:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003636:	2600      	movs	r6, #0
 8003638:	fbbc f9f3 	udiv	r9, ip, r3
 800363c:	4635      	mov	r5, r6
 800363e:	fb03 ca19 	mls	sl, r3, r9, ip
 8003642:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003646:	2f09      	cmp	r7, #9
 8003648:	d818      	bhi.n	800367c <_strtol_l.isra.0+0xac>
 800364a:	463c      	mov	r4, r7
 800364c:	42a3      	cmp	r3, r4
 800364e:	dd24      	ble.n	800369a <_strtol_l.isra.0+0xca>
 8003650:	2e00      	cmp	r6, #0
 8003652:	db1f      	blt.n	8003694 <_strtol_l.isra.0+0xc4>
 8003654:	45a9      	cmp	r9, r5
 8003656:	d31d      	bcc.n	8003694 <_strtol_l.isra.0+0xc4>
 8003658:	d101      	bne.n	800365e <_strtol_l.isra.0+0x8e>
 800365a:	45a2      	cmp	sl, r4
 800365c:	db1a      	blt.n	8003694 <_strtol_l.isra.0+0xc4>
 800365e:	fb05 4503 	mla	r5, r5, r3, r4
 8003662:	2601      	movs	r6, #1
 8003664:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003668:	e7eb      	b.n	8003642 <_strtol_l.isra.0+0x72>
 800366a:	2c2b      	cmp	r4, #43	; 0x2b
 800366c:	bf08      	it	eq
 800366e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003672:	46a8      	mov	r8, r5
 8003674:	bf08      	it	eq
 8003676:	f106 0e02 	addeq.w	lr, r6, #2
 800367a:	e7c7      	b.n	800360c <_strtol_l.isra.0+0x3c>
 800367c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003680:	2f19      	cmp	r7, #25
 8003682:	d801      	bhi.n	8003688 <_strtol_l.isra.0+0xb8>
 8003684:	3c37      	subs	r4, #55	; 0x37
 8003686:	e7e1      	b.n	800364c <_strtol_l.isra.0+0x7c>
 8003688:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800368c:	2f19      	cmp	r7, #25
 800368e:	d804      	bhi.n	800369a <_strtol_l.isra.0+0xca>
 8003690:	3c57      	subs	r4, #87	; 0x57
 8003692:	e7db      	b.n	800364c <_strtol_l.isra.0+0x7c>
 8003694:	f04f 36ff 	mov.w	r6, #4294967295
 8003698:	e7e4      	b.n	8003664 <_strtol_l.isra.0+0x94>
 800369a:	2e00      	cmp	r6, #0
 800369c:	da05      	bge.n	80036aa <_strtol_l.isra.0+0xda>
 800369e:	2322      	movs	r3, #34	; 0x22
 80036a0:	6003      	str	r3, [r0, #0]
 80036a2:	4665      	mov	r5, ip
 80036a4:	b942      	cbnz	r2, 80036b8 <_strtol_l.isra.0+0xe8>
 80036a6:	4628      	mov	r0, r5
 80036a8:	e79d      	b.n	80035e6 <_strtol_l.isra.0+0x16>
 80036aa:	f1b8 0f00 	cmp.w	r8, #0
 80036ae:	d000      	beq.n	80036b2 <_strtol_l.isra.0+0xe2>
 80036b0:	426d      	negs	r5, r5
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d0f7      	beq.n	80036a6 <_strtol_l.isra.0+0xd6>
 80036b6:	b10e      	cbz	r6, 80036bc <_strtol_l.isra.0+0xec>
 80036b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80036bc:	6011      	str	r1, [r2, #0]
 80036be:	e7f2      	b.n	80036a6 <_strtol_l.isra.0+0xd6>
 80036c0:	2430      	movs	r4, #48	; 0x30
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1b3      	bne.n	800362e <_strtol_l.isra.0+0x5e>
 80036c6:	2308      	movs	r3, #8
 80036c8:	e7b1      	b.n	800362e <_strtol_l.isra.0+0x5e>
 80036ca:	2c30      	cmp	r4, #48	; 0x30
 80036cc:	d0a4      	beq.n	8003618 <_strtol_l.isra.0+0x48>
 80036ce:	230a      	movs	r3, #10
 80036d0:	e7ad      	b.n	800362e <_strtol_l.isra.0+0x5e>
 80036d2:	bf00      	nop
 80036d4:	08003af1 	.word	0x08003af1

080036d8 <_strtol_r>:
 80036d8:	f7ff bf7a 	b.w	80035d0 <_strtol_l.isra.0>

080036dc <_strtoul_l.isra.0>:
 80036dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036e0:	4e3b      	ldr	r6, [pc, #236]	; (80037d0 <_strtoul_l.isra.0+0xf4>)
 80036e2:	4686      	mov	lr, r0
 80036e4:	468c      	mov	ip, r1
 80036e6:	4660      	mov	r0, ip
 80036e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80036ec:	5da5      	ldrb	r5, [r4, r6]
 80036ee:	f015 0508 	ands.w	r5, r5, #8
 80036f2:	d1f8      	bne.n	80036e6 <_strtoul_l.isra.0+0xa>
 80036f4:	2c2d      	cmp	r4, #45	; 0x2d
 80036f6:	d134      	bne.n	8003762 <_strtoul_l.isra.0+0x86>
 80036f8:	f89c 4000 	ldrb.w	r4, [ip]
 80036fc:	f04f 0801 	mov.w	r8, #1
 8003700:	f100 0c02 	add.w	ip, r0, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d05e      	beq.n	80037c6 <_strtoul_l.isra.0+0xea>
 8003708:	2b10      	cmp	r3, #16
 800370a:	d10c      	bne.n	8003726 <_strtoul_l.isra.0+0x4a>
 800370c:	2c30      	cmp	r4, #48	; 0x30
 800370e:	d10a      	bne.n	8003726 <_strtoul_l.isra.0+0x4a>
 8003710:	f89c 0000 	ldrb.w	r0, [ip]
 8003714:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003718:	2858      	cmp	r0, #88	; 0x58
 800371a:	d14f      	bne.n	80037bc <_strtoul_l.isra.0+0xe0>
 800371c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003720:	2310      	movs	r3, #16
 8003722:	f10c 0c02 	add.w	ip, ip, #2
 8003726:	f04f 37ff 	mov.w	r7, #4294967295
 800372a:	2500      	movs	r5, #0
 800372c:	fbb7 f7f3 	udiv	r7, r7, r3
 8003730:	fb03 f907 	mul.w	r9, r3, r7
 8003734:	ea6f 0909 	mvn.w	r9, r9
 8003738:	4628      	mov	r0, r5
 800373a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800373e:	2e09      	cmp	r6, #9
 8003740:	d818      	bhi.n	8003774 <_strtoul_l.isra.0+0x98>
 8003742:	4634      	mov	r4, r6
 8003744:	42a3      	cmp	r3, r4
 8003746:	dd24      	ble.n	8003792 <_strtoul_l.isra.0+0xb6>
 8003748:	2d00      	cmp	r5, #0
 800374a:	db1f      	blt.n	800378c <_strtoul_l.isra.0+0xb0>
 800374c:	4287      	cmp	r7, r0
 800374e:	d31d      	bcc.n	800378c <_strtoul_l.isra.0+0xb0>
 8003750:	d101      	bne.n	8003756 <_strtoul_l.isra.0+0x7a>
 8003752:	45a1      	cmp	r9, r4
 8003754:	db1a      	blt.n	800378c <_strtoul_l.isra.0+0xb0>
 8003756:	fb00 4003 	mla	r0, r0, r3, r4
 800375a:	2501      	movs	r5, #1
 800375c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003760:	e7eb      	b.n	800373a <_strtoul_l.isra.0+0x5e>
 8003762:	2c2b      	cmp	r4, #43	; 0x2b
 8003764:	bf08      	it	eq
 8003766:	f89c 4000 	ldrbeq.w	r4, [ip]
 800376a:	46a8      	mov	r8, r5
 800376c:	bf08      	it	eq
 800376e:	f100 0c02 	addeq.w	ip, r0, #2
 8003772:	e7c7      	b.n	8003704 <_strtoul_l.isra.0+0x28>
 8003774:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003778:	2e19      	cmp	r6, #25
 800377a:	d801      	bhi.n	8003780 <_strtoul_l.isra.0+0xa4>
 800377c:	3c37      	subs	r4, #55	; 0x37
 800377e:	e7e1      	b.n	8003744 <_strtoul_l.isra.0+0x68>
 8003780:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003784:	2e19      	cmp	r6, #25
 8003786:	d804      	bhi.n	8003792 <_strtoul_l.isra.0+0xb6>
 8003788:	3c57      	subs	r4, #87	; 0x57
 800378a:	e7db      	b.n	8003744 <_strtoul_l.isra.0+0x68>
 800378c:	f04f 35ff 	mov.w	r5, #4294967295
 8003790:	e7e4      	b.n	800375c <_strtoul_l.isra.0+0x80>
 8003792:	2d00      	cmp	r5, #0
 8003794:	da07      	bge.n	80037a6 <_strtoul_l.isra.0+0xca>
 8003796:	2322      	movs	r3, #34	; 0x22
 8003798:	f8ce 3000 	str.w	r3, [lr]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	b942      	cbnz	r2, 80037b4 <_strtoul_l.isra.0+0xd8>
 80037a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037a6:	f1b8 0f00 	cmp.w	r8, #0
 80037aa:	d000      	beq.n	80037ae <_strtoul_l.isra.0+0xd2>
 80037ac:	4240      	negs	r0, r0
 80037ae:	2a00      	cmp	r2, #0
 80037b0:	d0f7      	beq.n	80037a2 <_strtoul_l.isra.0+0xc6>
 80037b2:	b10d      	cbz	r5, 80037b8 <_strtoul_l.isra.0+0xdc>
 80037b4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80037b8:	6011      	str	r1, [r2, #0]
 80037ba:	e7f2      	b.n	80037a2 <_strtoul_l.isra.0+0xc6>
 80037bc:	2430      	movs	r4, #48	; 0x30
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1b1      	bne.n	8003726 <_strtoul_l.isra.0+0x4a>
 80037c2:	2308      	movs	r3, #8
 80037c4:	e7af      	b.n	8003726 <_strtoul_l.isra.0+0x4a>
 80037c6:	2c30      	cmp	r4, #48	; 0x30
 80037c8:	d0a2      	beq.n	8003710 <_strtoul_l.isra.0+0x34>
 80037ca:	230a      	movs	r3, #10
 80037cc:	e7ab      	b.n	8003726 <_strtoul_l.isra.0+0x4a>
 80037ce:	bf00      	nop
 80037d0:	08003af1 	.word	0x08003af1

080037d4 <_strtoul_r>:
 80037d4:	f7ff bf82 	b.w	80036dc <_strtoul_l.isra.0>

080037d8 <__submore>:
 80037d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037dc:	460c      	mov	r4, r1
 80037de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80037e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037e4:	4299      	cmp	r1, r3
 80037e6:	d11d      	bne.n	8003824 <__submore+0x4c>
 80037e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037ec:	f000 f8a8 	bl	8003940 <_malloc_r>
 80037f0:	b918      	cbnz	r0, 80037fa <__submore+0x22>
 80037f2:	f04f 30ff 	mov.w	r0, #4294967295
 80037f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8003800:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003804:	6360      	str	r0, [r4, #52]	; 0x34
 8003806:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800380a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800380e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003812:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003816:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800381a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800381e:	6020      	str	r0, [r4, #0]
 8003820:	2000      	movs	r0, #0
 8003822:	e7e8      	b.n	80037f6 <__submore+0x1e>
 8003824:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003826:	0077      	lsls	r7, r6, #1
 8003828:	463a      	mov	r2, r7
 800382a:	f000 f8e3 	bl	80039f4 <_realloc_r>
 800382e:	4605      	mov	r5, r0
 8003830:	2800      	cmp	r0, #0
 8003832:	d0de      	beq.n	80037f2 <__submore+0x1a>
 8003834:	eb00 0806 	add.w	r8, r0, r6
 8003838:	4601      	mov	r1, r0
 800383a:	4632      	mov	r2, r6
 800383c:	4640      	mov	r0, r8
 800383e:	f000 f807 	bl	8003850 <memcpy>
 8003842:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003846:	f8c4 8000 	str.w	r8, [r4]
 800384a:	e7e9      	b.n	8003820 <__submore+0x48>

0800384c <__retarget_lock_acquire_recursive>:
 800384c:	4770      	bx	lr

0800384e <__retarget_lock_release_recursive>:
 800384e:	4770      	bx	lr

08003850 <memcpy>:
 8003850:	440a      	add	r2, r1
 8003852:	4291      	cmp	r1, r2
 8003854:	f100 33ff 	add.w	r3, r0, #4294967295
 8003858:	d100      	bne.n	800385c <memcpy+0xc>
 800385a:	4770      	bx	lr
 800385c:	b510      	push	{r4, lr}
 800385e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003866:	4291      	cmp	r1, r2
 8003868:	d1f9      	bne.n	800385e <memcpy+0xe>
 800386a:	bd10      	pop	{r4, pc}

0800386c <memmove>:
 800386c:	4288      	cmp	r0, r1
 800386e:	b510      	push	{r4, lr}
 8003870:	eb01 0402 	add.w	r4, r1, r2
 8003874:	d902      	bls.n	800387c <memmove+0x10>
 8003876:	4284      	cmp	r4, r0
 8003878:	4623      	mov	r3, r4
 800387a:	d807      	bhi.n	800388c <memmove+0x20>
 800387c:	1e43      	subs	r3, r0, #1
 800387e:	42a1      	cmp	r1, r4
 8003880:	d008      	beq.n	8003894 <memmove+0x28>
 8003882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800388a:	e7f8      	b.n	800387e <memmove+0x12>
 800388c:	4402      	add	r2, r0
 800388e:	4601      	mov	r1, r0
 8003890:	428a      	cmp	r2, r1
 8003892:	d100      	bne.n	8003896 <memmove+0x2a>
 8003894:	bd10      	pop	{r4, pc}
 8003896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800389a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800389e:	e7f7      	b.n	8003890 <memmove+0x24>

080038a0 <_free_r>:
 80038a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038a2:	2900      	cmp	r1, #0
 80038a4:	d048      	beq.n	8003938 <_free_r+0x98>
 80038a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038aa:	9001      	str	r0, [sp, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f1a1 0404 	sub.w	r4, r1, #4
 80038b2:	bfb8      	it	lt
 80038b4:	18e4      	addlt	r4, r4, r3
 80038b6:	f000 f8d3 	bl	8003a60 <__malloc_lock>
 80038ba:	4a20      	ldr	r2, [pc, #128]	; (800393c <_free_r+0x9c>)
 80038bc:	9801      	ldr	r0, [sp, #4]
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	4615      	mov	r5, r2
 80038c2:	b933      	cbnz	r3, 80038d2 <_free_r+0x32>
 80038c4:	6063      	str	r3, [r4, #4]
 80038c6:	6014      	str	r4, [r2, #0]
 80038c8:	b003      	add	sp, #12
 80038ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038ce:	f000 b8cd 	b.w	8003a6c <__malloc_unlock>
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	d90b      	bls.n	80038ee <_free_r+0x4e>
 80038d6:	6821      	ldr	r1, [r4, #0]
 80038d8:	1862      	adds	r2, r4, r1
 80038da:	4293      	cmp	r3, r2
 80038dc:	bf04      	itt	eq
 80038de:	681a      	ldreq	r2, [r3, #0]
 80038e0:	685b      	ldreq	r3, [r3, #4]
 80038e2:	6063      	str	r3, [r4, #4]
 80038e4:	bf04      	itt	eq
 80038e6:	1852      	addeq	r2, r2, r1
 80038e8:	6022      	streq	r2, [r4, #0]
 80038ea:	602c      	str	r4, [r5, #0]
 80038ec:	e7ec      	b.n	80038c8 <_free_r+0x28>
 80038ee:	461a      	mov	r2, r3
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b10b      	cbz	r3, 80038f8 <_free_r+0x58>
 80038f4:	42a3      	cmp	r3, r4
 80038f6:	d9fa      	bls.n	80038ee <_free_r+0x4e>
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	1855      	adds	r5, r2, r1
 80038fc:	42a5      	cmp	r5, r4
 80038fe:	d10b      	bne.n	8003918 <_free_r+0x78>
 8003900:	6824      	ldr	r4, [r4, #0]
 8003902:	4421      	add	r1, r4
 8003904:	1854      	adds	r4, r2, r1
 8003906:	42a3      	cmp	r3, r4
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	d1dd      	bne.n	80038c8 <_free_r+0x28>
 800390c:	681c      	ldr	r4, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	6053      	str	r3, [r2, #4]
 8003912:	4421      	add	r1, r4
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	e7d7      	b.n	80038c8 <_free_r+0x28>
 8003918:	d902      	bls.n	8003920 <_free_r+0x80>
 800391a:	230c      	movs	r3, #12
 800391c:	6003      	str	r3, [r0, #0]
 800391e:	e7d3      	b.n	80038c8 <_free_r+0x28>
 8003920:	6825      	ldr	r5, [r4, #0]
 8003922:	1961      	adds	r1, r4, r5
 8003924:	428b      	cmp	r3, r1
 8003926:	bf04      	itt	eq
 8003928:	6819      	ldreq	r1, [r3, #0]
 800392a:	685b      	ldreq	r3, [r3, #4]
 800392c:	6063      	str	r3, [r4, #4]
 800392e:	bf04      	itt	eq
 8003930:	1949      	addeq	r1, r1, r5
 8003932:	6021      	streq	r1, [r4, #0]
 8003934:	6054      	str	r4, [r2, #4]
 8003936:	e7c7      	b.n	80038c8 <_free_r+0x28>
 8003938:	b003      	add	sp, #12
 800393a:	bd30      	pop	{r4, r5, pc}
 800393c:	200000ec 	.word	0x200000ec

08003940 <_malloc_r>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	1ccd      	adds	r5, r1, #3
 8003944:	f025 0503 	bic.w	r5, r5, #3
 8003948:	3508      	adds	r5, #8
 800394a:	2d0c      	cmp	r5, #12
 800394c:	bf38      	it	cc
 800394e:	250c      	movcc	r5, #12
 8003950:	2d00      	cmp	r5, #0
 8003952:	4606      	mov	r6, r0
 8003954:	db01      	blt.n	800395a <_malloc_r+0x1a>
 8003956:	42a9      	cmp	r1, r5
 8003958:	d903      	bls.n	8003962 <_malloc_r+0x22>
 800395a:	230c      	movs	r3, #12
 800395c:	6033      	str	r3, [r6, #0]
 800395e:	2000      	movs	r0, #0
 8003960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003962:	f000 f87d 	bl	8003a60 <__malloc_lock>
 8003966:	4921      	ldr	r1, [pc, #132]	; (80039ec <_malloc_r+0xac>)
 8003968:	680a      	ldr	r2, [r1, #0]
 800396a:	4614      	mov	r4, r2
 800396c:	b99c      	cbnz	r4, 8003996 <_malloc_r+0x56>
 800396e:	4f20      	ldr	r7, [pc, #128]	; (80039f0 <_malloc_r+0xb0>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b923      	cbnz	r3, 800397e <_malloc_r+0x3e>
 8003974:	4621      	mov	r1, r4
 8003976:	4630      	mov	r0, r6
 8003978:	f000 f862 	bl	8003a40 <_sbrk_r>
 800397c:	6038      	str	r0, [r7, #0]
 800397e:	4629      	mov	r1, r5
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f85d 	bl	8003a40 <_sbrk_r>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	d123      	bne.n	80039d2 <_malloc_r+0x92>
 800398a:	230c      	movs	r3, #12
 800398c:	6033      	str	r3, [r6, #0]
 800398e:	4630      	mov	r0, r6
 8003990:	f000 f86c 	bl	8003a6c <__malloc_unlock>
 8003994:	e7e3      	b.n	800395e <_malloc_r+0x1e>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	1b5b      	subs	r3, r3, r5
 800399a:	d417      	bmi.n	80039cc <_malloc_r+0x8c>
 800399c:	2b0b      	cmp	r3, #11
 800399e:	d903      	bls.n	80039a8 <_malloc_r+0x68>
 80039a0:	6023      	str	r3, [r4, #0]
 80039a2:	441c      	add	r4, r3
 80039a4:	6025      	str	r5, [r4, #0]
 80039a6:	e004      	b.n	80039b2 <_malloc_r+0x72>
 80039a8:	6863      	ldr	r3, [r4, #4]
 80039aa:	42a2      	cmp	r2, r4
 80039ac:	bf0c      	ite	eq
 80039ae:	600b      	streq	r3, [r1, #0]
 80039b0:	6053      	strne	r3, [r2, #4]
 80039b2:	4630      	mov	r0, r6
 80039b4:	f000 f85a 	bl	8003a6c <__malloc_unlock>
 80039b8:	f104 000b 	add.w	r0, r4, #11
 80039bc:	1d23      	adds	r3, r4, #4
 80039be:	f020 0007 	bic.w	r0, r0, #7
 80039c2:	1ac2      	subs	r2, r0, r3
 80039c4:	d0cc      	beq.n	8003960 <_malloc_r+0x20>
 80039c6:	1a1b      	subs	r3, r3, r0
 80039c8:	50a3      	str	r3, [r4, r2]
 80039ca:	e7c9      	b.n	8003960 <_malloc_r+0x20>
 80039cc:	4622      	mov	r2, r4
 80039ce:	6864      	ldr	r4, [r4, #4]
 80039d0:	e7cc      	b.n	800396c <_malloc_r+0x2c>
 80039d2:	1cc4      	adds	r4, r0, #3
 80039d4:	f024 0403 	bic.w	r4, r4, #3
 80039d8:	42a0      	cmp	r0, r4
 80039da:	d0e3      	beq.n	80039a4 <_malloc_r+0x64>
 80039dc:	1a21      	subs	r1, r4, r0
 80039de:	4630      	mov	r0, r6
 80039e0:	f000 f82e 	bl	8003a40 <_sbrk_r>
 80039e4:	3001      	adds	r0, #1
 80039e6:	d1dd      	bne.n	80039a4 <_malloc_r+0x64>
 80039e8:	e7cf      	b.n	800398a <_malloc_r+0x4a>
 80039ea:	bf00      	nop
 80039ec:	200000ec 	.word	0x200000ec
 80039f0:	200000f0 	.word	0x200000f0

080039f4 <_realloc_r>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	4607      	mov	r7, r0
 80039f8:	4614      	mov	r4, r2
 80039fa:	460e      	mov	r6, r1
 80039fc:	b921      	cbnz	r1, 8003a08 <_realloc_r+0x14>
 80039fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a02:	4611      	mov	r1, r2
 8003a04:	f7ff bf9c 	b.w	8003940 <_malloc_r>
 8003a08:	b922      	cbnz	r2, 8003a14 <_realloc_r+0x20>
 8003a0a:	f7ff ff49 	bl	80038a0 <_free_r>
 8003a0e:	4625      	mov	r5, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a14:	f000 f830 	bl	8003a78 <_malloc_usable_size_r>
 8003a18:	42a0      	cmp	r0, r4
 8003a1a:	d20f      	bcs.n	8003a3c <_realloc_r+0x48>
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4638      	mov	r0, r7
 8003a20:	f7ff ff8e 	bl	8003940 <_malloc_r>
 8003a24:	4605      	mov	r5, r0
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d0f2      	beq.n	8003a10 <_realloc_r+0x1c>
 8003a2a:	4631      	mov	r1, r6
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	f7ff ff0f 	bl	8003850 <memcpy>
 8003a32:	4631      	mov	r1, r6
 8003a34:	4638      	mov	r0, r7
 8003a36:	f7ff ff33 	bl	80038a0 <_free_r>
 8003a3a:	e7e9      	b.n	8003a10 <_realloc_r+0x1c>
 8003a3c:	4635      	mov	r5, r6
 8003a3e:	e7e7      	b.n	8003a10 <_realloc_r+0x1c>

08003a40 <_sbrk_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4d06      	ldr	r5, [pc, #24]	; (8003a5c <_sbrk_r+0x1c>)
 8003a44:	2300      	movs	r3, #0
 8003a46:	4604      	mov	r4, r0
 8003a48:	4608      	mov	r0, r1
 8003a4a:	602b      	str	r3, [r5, #0]
 8003a4c:	f7fc ffd6 	bl	80009fc <_sbrk>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d102      	bne.n	8003a5a <_sbrk_r+0x1a>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b103      	cbz	r3, 8003a5a <_sbrk_r+0x1a>
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
 8003a5c:	20000178 	.word	0x20000178

08003a60 <__malloc_lock>:
 8003a60:	4801      	ldr	r0, [pc, #4]	; (8003a68 <__malloc_lock+0x8>)
 8003a62:	f7ff bef3 	b.w	800384c <__retarget_lock_acquire_recursive>
 8003a66:	bf00      	nop
 8003a68:	20000180 	.word	0x20000180

08003a6c <__malloc_unlock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	; (8003a74 <__malloc_unlock+0x8>)
 8003a6e:	f7ff beee 	b.w	800384e <__retarget_lock_release_recursive>
 8003a72:	bf00      	nop
 8003a74:	20000180 	.word	0x20000180

08003a78 <_malloc_usable_size_r>:
 8003a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a7c:	1f18      	subs	r0, r3, #4
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bfbc      	itt	lt
 8003a82:	580b      	ldrlt	r3, [r1, r0]
 8003a84:	18c0      	addlt	r0, r0, r3
 8003a86:	4770      	bx	lr

08003a88 <_init>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	bf00      	nop
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr

08003a94 <_fini>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	bf00      	nop
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr
